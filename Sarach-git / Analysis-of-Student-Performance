{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Analysis_of_Student_Performance.ipynb",
      "provenance": [],
      "collapsed_sections": [
        "9cL4Gb7L5dxF"
      ],
      "toc_visible": true,
      "authorship_tag": "ABX9TyN9q3QY3Qq/2mb/Vw0/2XYJ",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Sarach-git/Analysis-of-Student-Performance/blob/main/Sarach-git%20/%20Analysis-of-Student-Performance\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Analysis-of-Student-Performance\n",
        "Student : Sara Charmchi  \n",
        "Student ID : 400422066  \n",
        "Advisor : Dr.Parand "
      ],
      "metadata": {
        "id": "gb2Dg8vX8aWK"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "As the features in this dataset are anonymous and encoded, defining the target variable may be hard, so methods like pca are used however plenty of supervised methods are performed assuming one feature as target variable ( arbitrary and based on the case)  \n",
        "\n",
        "Feature Selection is a technique which is used when we you know the target variable(Supervised Learning)\n",
        "\n",
        "When we talk with respect to Unsupervised Learning, there is no exact technique which could do that. But there is something which can help us in those lines i.e., Dimensionality Reduction, this technique is used to reduce the number of features and give us the features which explains the most about the dataset. The features would be derived from the existing features and might or might not be the same features.  \n"
      ],
      "metadata": {
        "id": "iiu1hi4XanhA"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Import Packages"
      ],
      "metadata": {
        "id": "qhUG7Ix39Yan"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "from scipy import stats\n",
        "import seaborn as sns\n",
        "from sklearn import preprocessing\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import seaborn as sns\n",
        "import folium\n",
        "from folium import plugins\n",
        "import branca.colormap as cm\n",
        "import zipfile\n",
        "from scipy import stats\n",
        "import urllib\n",
        "from geopy.distance import geodesic\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.metrics import confusion_matrix\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import roc_auc_score\n",
        "from sklearn.tree import DecisionTreeRegressor\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn import metrics\n",
        "from sklearn.metrics import mean_absolute_error as mae\n",
        "from sklearn.metrics import mean_squared_error as mse\n",
        "from sklearn.metrics import precision_score as precision\n",
        "from sklearn.metrics import recall_score as recall\n",
        "from sklearn.metrics import f1_score as f1\n",
        "import random\n",
        "from sklearn.model_selection import train_test_split, cross_val_score, RandomizedSearchCV\n",
        "from sklearn.feature_selection import VarianceThreshold\n",
        "from sklearn.ensemble import RandomForestRegressor, RandomForestClassifier\n",
        "import joblib\n",
        "\n",
        "from sklearn.metrics import roc_curve, auc\n",
        "from sklearn.pipeline import make_pipeline\n",
        "\n",
        "%matplotlib inline\n",
        "from skimage.io import imread"
      ],
      "metadata": {
        "id": "ne2KQvou9bM1"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import sys\n",
        "import joblib\n",
        "sys.modules['sklearn.externals.joblib'] = joblib\n",
        "import sklearn.externals as extjoblib\n",
        "from mlxtend.feature_selection import SequentialFeatureSelector as SFS\n"
      ],
      "metadata": {
        "id": "3NE-Ew4Xkm4o"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from mlxtend.feature_selection import ExhaustiveFeatureSelector as EFS\n",
        "from sklearn.feature_selection import RFE\n",
        "from sklearn.feature_selection import SelectKBest, chi2\n",
        "from sklearn.feature_selection import SelectPercentile\n",
        "from sklearn.linear_model import Ridge, RidgeCV, Lasso, LassoCV\n",
        "from sklearn.metrics import mean_squared_error,r2_score, mean_absolute_error"
      ],
      "metadata": {
        "id": "q_9qPzB_pxkR"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.preprocessing import StandardScaler, normalize\n",
        "from sklearn.decomposition import PCA\n",
        "import scipy.cluster.hierarchy as hc\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.cluster import AgglomerativeClustering\n",
        "from sklearn.svm import SVC"
      ],
      "metadata": {
        "id": "sPYTi4d7l-lv"
      },
      "execution_count": 236,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Load Dataset"
      ],
      "metadata": {
        "id": "-45jxk0D-kr-"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "resources": {
            "http://localhost:8080/nbextensions/google.colab/files.js": {
              "data": "Ly8gQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQwovLwovLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgovLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKLy8KLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKLy8KLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQovLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAovLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZAovLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KCi8qKgogKiBAZmlsZW92ZXJ2aWV3IEhlbHBlcnMgZm9yIGdvb2dsZS5jb2xhYiBQeXRob24gbW9kdWxlLgogKi8KKGZ1bmN0aW9uKHNjb3BlKSB7CmZ1bmN0aW9uIHNwYW4odGV4dCwgc3R5bGVBdHRyaWJ1dGVzID0ge30pIHsKICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpOwogIGVsZW1lbnQudGV4dENvbnRlbnQgPSB0ZXh0OwogIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHN0eWxlQXR0cmlidXRlcykpIHsKICAgIGVsZW1lbnQuc3R5bGVba2V5XSA9IHN0eWxlQXR0cmlidXRlc1trZXldOwogIH0KICByZXR1cm4gZWxlbWVudDsKfQoKLy8gTWF4IG51bWJlciBvZiBieXRlcyB3aGljaCB3aWxsIGJlIHVwbG9hZGVkIGF0IGEgdGltZS4KY29uc3QgTUFYX1BBWUxPQURfU0laRSA9IDEwMCAqIDEwMjQ7CgpmdW5jdGlvbiBfdXBsb2FkRmlsZXMoaW5wdXRJZCwgb3V0cHV0SWQpIHsKICBjb25zdCBzdGVwcyA9IHVwbG9hZEZpbGVzU3RlcChpbnB1dElkLCBvdXRwdXRJZCk7CiAgY29uc3Qgb3V0cHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG91dHB1dElkKTsKICAvLyBDYWNoZSBzdGVwcyBvbiB0aGUgb3V0cHV0RWxlbWVudCB0byBtYWtlIGl0IGF2YWlsYWJsZSBmb3IgdGhlIG5leHQgY2FsbAogIC8vIHRvIHVwbG9hZEZpbGVzQ29udGludWUgZnJvbSBQeXRob24uCiAgb3V0cHV0RWxlbWVudC5zdGVwcyA9IHN0ZXBzOwoKICByZXR1cm4gX3VwbG9hZEZpbGVzQ29udGludWUob3V0cHV0SWQpOwp9CgovLyBUaGlzIGlzIHJvdWdobHkgYW4gYXN5bmMgZ2VuZXJhdG9yIChub3Qgc3VwcG9ydGVkIGluIHRoZSBicm93c2VyIHlldCksCi8vIHdoZXJlIHRoZXJlIGFyZSBtdWx0aXBsZSBhc3luY2hyb25vdXMgc3RlcHMgYW5kIHRoZSBQeXRob24gc2lkZSBpcyBnb2luZwovLyB0byBwb2xsIGZvciBjb21wbGV0aW9uIG9mIGVhY2ggc3RlcC4KLy8gVGhpcyB1c2VzIGEgUHJvbWlzZSB0byBibG9jayB0aGUgcHl0aG9uIHNpZGUgb24gY29tcGxldGlvbiBvZiBlYWNoIHN0ZXAsCi8vIHRoZW4gcGFzc2VzIHRoZSByZXN1bHQgb2YgdGhlIHByZXZpb3VzIHN0ZXAgYXMgdGhlIGlucHV0IHRvIHRoZSBuZXh0IHN0ZXAuCmZ1bmN0aW9uIF91cGxvYWRGaWxlc0NvbnRpbnVlKG91dHB1dElkKSB7CiAgY29uc3Qgb3V0cHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG91dHB1dElkKTsKICBjb25zdCBzdGVwcyA9IG91dHB1dEVsZW1lbnQuc3RlcHM7CgogIGNvbnN0IG5leHQgPSBzdGVwcy5uZXh0KG91dHB1dEVsZW1lbnQubGFzdFByb21pc2VWYWx1ZSk7CiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShuZXh0LnZhbHVlLnByb21pc2UpLnRoZW4oKHZhbHVlKSA9PiB7CiAgICAvLyBDYWNoZSB0aGUgbGFzdCBwcm9taXNlIHZhbHVlIHRvIG1ha2UgaXQgYXZhaWxhYmxlIHRvIHRoZSBuZXh0CiAgICAvLyBzdGVwIG9mIHRoZSBnZW5lcmF0b3IuCiAgICBvdXRwdXRFbGVtZW50Lmxhc3RQcm9taXNlVmFsdWUgPSB2YWx1ZTsKICAgIHJldHVybiBuZXh0LnZhbHVlLnJlc3BvbnNlOwogIH0pOwp9CgovKioKICogR2VuZXJhdG9yIGZ1bmN0aW9uIHdoaWNoIGlzIGNhbGxlZCBiZXR3ZWVuIGVhY2ggYXN5bmMgc3RlcCBvZiB0aGUgdXBsb2FkCiAqIHByb2Nlc3MuCiAqIEBwYXJhbSB7c3RyaW5nfSBpbnB1dElkIEVsZW1lbnQgSUQgb2YgdGhlIGlucHV0IGZpbGUgcGlja2VyIGVsZW1lbnQuCiAqIEBwYXJhbSB7c3RyaW5nfSBvdXRwdXRJZCBFbGVtZW50IElEIG9mIHRoZSBvdXRwdXQgZGlzcGxheS4KICogQHJldHVybiB7IUl0ZXJhYmxlPCFPYmplY3Q+fSBJdGVyYWJsZSBvZiBuZXh0IHN0ZXBzLgogKi8KZnVuY3Rpb24qIHVwbG9hZEZpbGVzU3RlcChpbnB1dElkLCBvdXRwdXRJZCkgewogIGNvbnN0IGlucHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlucHV0SWQpOwogIGlucHV0RWxlbWVudC5kaXNhYmxlZCA9IGZhbHNlOwoKICBjb25zdCBvdXRwdXRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQob3V0cHV0SWQpOwogIG91dHB1dEVsZW1lbnQuaW5uZXJIVE1MID0gJyc7CgogIGNvbnN0IHBpY2tlZFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgaW5wdXRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIChlKSA9PiB7CiAgICAgIHJlc29sdmUoZS50YXJnZXQuZmlsZXMpOwogICAgfSk7CiAgfSk7CgogIGNvbnN0IGNhbmNlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpOwogIGlucHV0RWxlbWVudC5wYXJlbnRFbGVtZW50LmFwcGVuZENoaWxkKGNhbmNlbCk7CiAgY2FuY2VsLnRleHRDb250ZW50ID0gJ0NhbmNlbCB1cGxvYWQnOwogIGNvbnN0IGNhbmNlbFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgY2FuY2VsLm9uY2xpY2sgPSAoKSA9PiB7CiAgICAgIHJlc29sdmUobnVsbCk7CiAgICB9OwogIH0pOwoKICAvLyBXYWl0IGZvciB0aGUgdXNlciB0byBwaWNrIHRoZSBmaWxlcy4KICBjb25zdCBmaWxlcyA9IHlpZWxkIHsKICAgIHByb21pc2U6IFByb21pc2UucmFjZShbcGlja2VkUHJvbWlzZSwgY2FuY2VsUHJvbWlzZV0pLAogICAgcmVzcG9uc2U6IHsKICAgICAgYWN0aW9uOiAnc3RhcnRpbmcnLAogICAgfQogIH07CgogIGNhbmNlbC5yZW1vdmUoKTsKCiAgLy8gRGlzYWJsZSB0aGUgaW5wdXQgZWxlbWVudCBzaW5jZSBmdXJ0aGVyIHBpY2tzIGFyZSBub3QgYWxsb3dlZC4KICBpbnB1dEVsZW1lbnQuZGlzYWJsZWQgPSB0cnVlOwoKICBpZiAoIWZpbGVzKSB7CiAgICByZXR1cm4gewogICAgICByZXNwb25zZTogewogICAgICAgIGFjdGlvbjogJ2NvbXBsZXRlJywKICAgICAgfQogICAgfTsKICB9CgogIGZvciAoY29uc3QgZmlsZSBvZiBmaWxlcykgewogICAgY29uc3QgbGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpOwogICAgbGkuYXBwZW5kKHNwYW4oZmlsZS5uYW1lLCB7Zm9udFdlaWdodDogJ2JvbGQnfSkpOwogICAgbGkuYXBwZW5kKHNwYW4oCiAgICAgICAgYCgke2ZpbGUudHlwZSB8fCAnbi9hJ30pIC0gJHtmaWxlLnNpemV9IGJ5dGVzLCBgICsKICAgICAgICBgbGFzdCBtb2RpZmllZDogJHsKICAgICAgICAgICAgZmlsZS5sYXN0TW9kaWZpZWREYXRlID8gZmlsZS5sYXN0TW9kaWZpZWREYXRlLnRvTG9jYWxlRGF0ZVN0cmluZygpIDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ24vYSd9IC0gYCkpOwogICAgY29uc3QgcGVyY2VudCA9IHNwYW4oJzAlIGRvbmUnKTsKICAgIGxpLmFwcGVuZENoaWxkKHBlcmNlbnQpOwoKICAgIG91dHB1dEVsZW1lbnQuYXBwZW5kQ2hpbGQobGkpOwoKICAgIGNvbnN0IGZpbGVEYXRhUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7CiAgICAgIGNvbnN0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7CiAgICAgIHJlYWRlci5vbmxvYWQgPSAoZSkgPT4gewogICAgICAgIHJlc29sdmUoZS50YXJnZXQucmVzdWx0KTsKICAgICAgfTsKICAgICAgcmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKGZpbGUpOwogICAgfSk7CiAgICAvLyBXYWl0IGZvciB0aGUgZGF0YSB0byBiZSByZWFkeS4KICAgIGxldCBmaWxlRGF0YSA9IHlpZWxkIHsKICAgICAgcHJvbWlzZTogZmlsZURhdGFQcm9taXNlLAogICAgICByZXNwb25zZTogewogICAgICAgIGFjdGlvbjogJ2NvbnRpbnVlJywKICAgICAgfQogICAgfTsKCiAgICAvLyBVc2UgYSBjaHVua2VkIHNlbmRpbmcgdG8gYXZvaWQgbWVzc2FnZSBzaXplIGxpbWl0cy4gU2VlIGIvNjIxMTU2NjAuCiAgICBsZXQgcG9zaXRpb24gPSAwOwogICAgZG8gewogICAgICBjb25zdCBsZW5ndGggPSBNYXRoLm1pbihmaWxlRGF0YS5ieXRlTGVuZ3RoIC0gcG9zaXRpb24sIE1BWF9QQVlMT0FEX1NJWkUpOwogICAgICBjb25zdCBjaHVuayA9IG5ldyBVaW50OEFycmF5KGZpbGVEYXRhLCBwb3NpdGlvbiwgbGVuZ3RoKTsKICAgICAgcG9zaXRpb24gKz0gbGVuZ3RoOwoKICAgICAgY29uc3QgYmFzZTY0ID0gYnRvYShTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIGNodW5rKSk7CiAgICAgIHlpZWxkIHsKICAgICAgICByZXNwb25zZTogewogICAgICAgICAgYWN0aW9uOiAnYXBwZW5kJywKICAgICAgICAgIGZpbGU6IGZpbGUubmFtZSwKICAgICAgICAgIGRhdGE6IGJhc2U2NCwKICAgICAgICB9LAogICAgICB9OwoKICAgICAgbGV0IHBlcmNlbnREb25lID0gZmlsZURhdGEuYnl0ZUxlbmd0aCA9PT0gMCA/CiAgICAgICAgICAxMDAgOgogICAgICAgICAgTWF0aC5yb3VuZCgocG9zaXRpb24gLyBmaWxlRGF0YS5ieXRlTGVuZ3RoKSAqIDEwMCk7CiAgICAgIHBlcmNlbnQudGV4dENvbnRlbnQgPSBgJHtwZXJjZW50RG9uZX0lIGRvbmVgOwoKICAgIH0gd2hpbGUgKHBvc2l0aW9uIDwgZmlsZURhdGEuYnl0ZUxlbmd0aCk7CiAgfQoKICAvLyBBbGwgZG9uZS4KICB5aWVsZCB7CiAgICByZXNwb25zZTogewogICAgICBhY3Rpb246ICdjb21wbGV0ZScsCiAgICB9CiAgfTsKfQoKc2NvcGUuZ29vZ2xlID0gc2NvcGUuZ29vZ2xlIHx8IHt9OwpzY29wZS5nb29nbGUuY29sYWIgPSBzY29wZS5nb29nbGUuY29sYWIgfHwge307CnNjb3BlLmdvb2dsZS5jb2xhYi5fZmlsZXMgPSB7CiAgX3VwbG9hZEZpbGVzLAogIF91cGxvYWRGaWxlc0NvbnRpbnVlLAp9Owp9KShzZWxmKTsK",
              "ok": true,
              "headers": [
                [
                  "content-type",
                  "application/javascript"
                ]
              ],
              "status": 200,
              "status_text": ""
            }
          },
          "base_uri": "https://localhost:8080/",
          "height": 73
        },
        "id": "-vmURGAz78r2",
        "outputId": "1d02976f-5618-4f6e-fd37-ef875f102dff"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-d353e47f-3740-43a6-a8d0-a22527b52fd1\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-d353e47f-3740-43a6-a8d0-a22527b52fd1\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script src=\"/nbextensions/google.colab/files.js\"></script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving dataset.xlsx to dataset.xlsx\n"
          ]
        }
      ],
      "source": [
        "from google.colab import files\n",
        "uploaded=files.upload()"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df=pd.read_excel('/content/dataset.xlsx')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nAuLTAV49PgD",
        "outputId": "2819a974-2ee7-4577-fc5a-75808ab90b6b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/openpyxl/styles/stylesheet.py:226: UserWarning: Workbook contains no default style, apply openpyxl's default\n",
            "  warn(\"Workbook contains no default style, apply openpyxl's default\")\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.drop('index', axis=1, inplace=True)"
      ],
      "metadata": {
        "id": "Qibh6J67sxCi"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.columns"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mOlvJSr2tyYV",
        "outputId": "bcd84a6f-a777-4092-82fb-49a99a7135f0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['feature 0', 'feature 1', 'feature 2', 'feature 3', 'feature 4',\n",
              "       'feature 5', 'feature 6', 'feature 7', 'feature 8', 'feature 9',\n",
              "       'feature 10', 'feature 11', 'feature 12', 'feature 13', 'feature 14',\n",
              "       'feature 15', 'feature 16', 'feature 17', 'feature 18', 'feature 19'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 69
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 382
        },
        "id": "DjcBbebQ9so8",
        "outputId": "f811923a-b4eb-4ebf-c3a1-7bfd951a0bb8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       feature 0  feature 1  feature 2  feature 3  feature 4  feature 5  \\\n",
              "count   50.00000  50.000000  50.000000  50.000000  50.000000  50.000000   \n",
              "mean     0.30000   0.380000   3.380000   1.560000   0.540000  13.100000   \n",
              "std      0.46291   0.490314   2.448573   0.577115   1.014386   5.047731   \n",
              "min      0.00000   0.000000   0.000000   0.000000   0.000000   1.000000   \n",
              "25%      0.00000   0.000000   1.000000   1.000000   0.000000  13.000000   \n",
              "50%      0.00000   0.000000   4.000000   2.000000   0.000000  13.000000   \n",
              "75%      1.00000   1.000000   5.750000   2.000000   1.000000  17.000000   \n",
              "max      1.00000   1.000000   7.000000   2.000000   3.000000  20.000000   \n",
              "\n",
              "       feature 6  feature 7  feature 8  feature 9  feature 10  feature 11  \\\n",
              "count  50.000000  50.000000  50.000000  50.000000   50.000000        50.0   \n",
              "mean    2.920000   5.460000   2.320000   0.320000    0.400000         1.0   \n",
              "std     4.164182   1.798072   2.226373   0.471212    1.385051         0.0   \n",
              "min     0.000000   0.000000   1.000000   0.000000    0.000000         1.0   \n",
              "25%     0.000000   6.000000   1.000000   0.000000    0.000000         1.0   \n",
              "50%     0.000000   6.000000   1.000000   0.000000    0.000000         1.0   \n",
              "75%     6.000000   6.000000   3.750000   1.000000    0.000000         1.0   \n",
              "max    11.000000   7.000000   9.000000   1.000000    6.000000         1.0   \n",
              "\n",
              "       feature 12  feature 13  feature 14  feature 15  feature 16  feature 17  \\\n",
              "count   50.000000   50.000000   50.000000   50.000000   50.000000   50.000000   \n",
              "mean     0.820000   11.760000   12.400000    7.940000    1.040000    1.280000   \n",
              "std      0.437526    9.325322    9.476071    0.424264    0.402036    0.607437   \n",
              "min      0.000000    0.000000    0.000000    5.000000    0.000000    0.000000   \n",
              "25%      1.000000    7.000000    7.000000    8.000000    1.000000    1.000000   \n",
              "50%      1.000000    7.000000    7.000000    8.000000    1.000000    1.000000   \n",
              "75%      1.000000   17.500000   18.750000    8.000000    1.000000    2.000000   \n",
              "max      2.000000   33.000000   32.000000    8.000000    2.000000    2.000000   \n",
              "\n",
              "       feature 18  feature 19  \n",
              "count   50.000000   50.000000  \n",
              "mean     0.980000    0.980000  \n",
              "std      1.731933    0.141421  \n",
              "min      0.000000    0.000000  \n",
              "25%      0.000000    1.000000  \n",
              "50%      0.000000    1.000000  \n",
              "75%      1.000000    1.000000  \n",
              "max      5.000000    1.000000  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-05993b25-03cc-4442-9b3a-66671a6a0d0f\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>feature 0</th>\n",
              "      <th>feature 1</th>\n",
              "      <th>feature 2</th>\n",
              "      <th>feature 3</th>\n",
              "      <th>feature 4</th>\n",
              "      <th>feature 5</th>\n",
              "      <th>feature 6</th>\n",
              "      <th>feature 7</th>\n",
              "      <th>feature 8</th>\n",
              "      <th>feature 9</th>\n",
              "      <th>feature 10</th>\n",
              "      <th>feature 11</th>\n",
              "      <th>feature 12</th>\n",
              "      <th>feature 13</th>\n",
              "      <th>feature 14</th>\n",
              "      <th>feature 15</th>\n",
              "      <th>feature 16</th>\n",
              "      <th>feature 17</th>\n",
              "      <th>feature 18</th>\n",
              "      <th>feature 19</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>50.00000</td>\n",
              "      <td>50.000000</td>\n",
              "      <td>50.000000</td>\n",
              "      <td>50.000000</td>\n",
              "      <td>50.000000</td>\n",
              "      <td>50.000000</td>\n",
              "      <td>50.000000</td>\n",
              "      <td>50.000000</td>\n",
              "      <td>50.000000</td>\n",
              "      <td>50.000000</td>\n",
              "      <td>50.000000</td>\n",
              "      <td>50.0</td>\n",
              "      <td>50.000000</td>\n",
              "      <td>50.000000</td>\n",
              "      <td>50.000000</td>\n",
              "      <td>50.000000</td>\n",
              "      <td>50.000000</td>\n",
              "      <td>50.000000</td>\n",
              "      <td>50.000000</td>\n",
              "      <td>50.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>0.30000</td>\n",
              "      <td>0.380000</td>\n",
              "      <td>3.380000</td>\n",
              "      <td>1.560000</td>\n",
              "      <td>0.540000</td>\n",
              "      <td>13.100000</td>\n",
              "      <td>2.920000</td>\n",
              "      <td>5.460000</td>\n",
              "      <td>2.320000</td>\n",
              "      <td>0.320000</td>\n",
              "      <td>0.400000</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.820000</td>\n",
              "      <td>11.760000</td>\n",
              "      <td>12.400000</td>\n",
              "      <td>7.940000</td>\n",
              "      <td>1.040000</td>\n",
              "      <td>1.280000</td>\n",
              "      <td>0.980000</td>\n",
              "      <td>0.980000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>0.46291</td>\n",
              "      <td>0.490314</td>\n",
              "      <td>2.448573</td>\n",
              "      <td>0.577115</td>\n",
              "      <td>1.014386</td>\n",
              "      <td>5.047731</td>\n",
              "      <td>4.164182</td>\n",
              "      <td>1.798072</td>\n",
              "      <td>2.226373</td>\n",
              "      <td>0.471212</td>\n",
              "      <td>1.385051</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.437526</td>\n",
              "      <td>9.325322</td>\n",
              "      <td>9.476071</td>\n",
              "      <td>0.424264</td>\n",
              "      <td>0.402036</td>\n",
              "      <td>0.607437</td>\n",
              "      <td>1.731933</td>\n",
              "      <td>0.141421</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>0.00000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>5.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>0.00000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>13.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>6.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>7.000000</td>\n",
              "      <td>7.000000</td>\n",
              "      <td>8.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>0.00000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>13.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>6.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>7.000000</td>\n",
              "      <td>7.000000</td>\n",
              "      <td>8.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>1.00000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>5.750000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>17.000000</td>\n",
              "      <td>6.000000</td>\n",
              "      <td>6.000000</td>\n",
              "      <td>3.750000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>17.500000</td>\n",
              "      <td>18.750000</td>\n",
              "      <td>8.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>1.00000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>7.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>20.000000</td>\n",
              "      <td>11.000000</td>\n",
              "      <td>7.000000</td>\n",
              "      <td>9.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>6.000000</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>33.000000</td>\n",
              "      <td>32.000000</td>\n",
              "      <td>8.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>5.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-05993b25-03cc-4442-9b3a-66671a6a0d0f')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-05993b25-03cc-4442-9b3a-66671a6a0d0f button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-05993b25-03cc-4442-9b3a-66671a6a0d0f');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 25
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "baHy4yqZ-S-0",
        "outputId": "c3187de5-7f3b-4282-b95c-180e8a8008d2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(50, 20)"
            ]
          },
          "metadata": {},
          "execution_count": 26
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.columns"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ltlFKcs2-YD7",
        "outputId": "2139a812-9c8c-4547-de50-9355bb6791f4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['feature 0', 'feature 1', 'feature 2', 'feature 3', 'feature 4',\n",
              "       'feature 5', 'feature 6', 'feature 7', 'feature 8', 'feature 9',\n",
              "       'feature 10', 'feature 11', 'feature 12', 'feature 13', 'feature 14',\n",
              "       'feature 15', 'feature 16', 'feature 17', 'feature 18', 'feature 19'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 27
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Data Cleaning"
      ],
      "metadata": {
        "id": "4MHs5j6yi3cD"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OqjGFtuhY4Qr",
        "outputId": "0347035b-25fa-4d2b-b612-5277fd600b82"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "feature 0     0\n",
              "feature 1     0\n",
              "feature 2     0\n",
              "feature 3     0\n",
              "feature 4     0\n",
              "feature 5     0\n",
              "feature 6     0\n",
              "feature 7     0\n",
              "feature 8     0\n",
              "feature 9     0\n",
              "feature 10    0\n",
              "feature 11    0\n",
              "feature 12    0\n",
              "feature 13    0\n",
              "feature 14    0\n",
              "feature 15    0\n",
              "feature 16    0\n",
              "feature 17    0\n",
              "feature 18    0\n",
              "feature 19    0\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 75
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.duplicated()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yD_kqxZEi-8R",
        "outputId": "ce62b6ec-10ff-4bc9-9fa6-d91683727b4d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0     False\n",
              "1     False\n",
              "2     False\n",
              "3     False\n",
              "4     False\n",
              "5     False\n",
              "6     False\n",
              "7     False\n",
              "8     False\n",
              "9     False\n",
              "10    False\n",
              "11    False\n",
              "12    False\n",
              "13    False\n",
              "14    False\n",
              "15    False\n",
              "16    False\n",
              "17    False\n",
              "18    False\n",
              "19    False\n",
              "20    False\n",
              "21    False\n",
              "22    False\n",
              "23    False\n",
              "24    False\n",
              "25    False\n",
              "26    False\n",
              "27    False\n",
              "28    False\n",
              "29    False\n",
              "30    False\n",
              "31    False\n",
              "32    False\n",
              "33    False\n",
              "34    False\n",
              "35    False\n",
              "36     True\n",
              "37    False\n",
              "38     True\n",
              "39    False\n",
              "40    False\n",
              "41    False\n",
              "42    False\n",
              "43     True\n",
              "44    False\n",
              "45    False\n",
              "46    False\n",
              "47    False\n",
              "48    False\n",
              "49    False\n",
              "dtype: bool"
            ]
          },
          "metadata": {},
          "execution_count": 76
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.drop_duplicates(keep=False, inplace=True)"
      ],
      "metadata": {
        "id": "nrvRMBgbwxvJ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ftVNLLQNw8eg",
        "outputId": "31379152-c00c-4dff-8657-41e8f8ccb4c1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(45, 20)"
            ]
          },
          "metadata": {},
          "execution_count": 78
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Exploratory Data Analysis"
      ],
      "metadata": {
        "id": "F-4vHO2Diom3"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from matplotlib import pylab \n",
        "def plots(df, variable):\n",
        "    plt.figure(figsize=(15,6))\n",
        "    plt.subplot(1, 2, 1)\n",
        "    df[variable].hist()\n",
        "    plt.subplot(1, 2, 2)\n",
        "    stats.probplot(df[variable], dist=\"norm\", plot=pylab)\n",
        "    plt.show()"
      ],
      "metadata": {
        "id": "ujAl8EDuPojO"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "for each in df.columns:\n",
        "  print (each)\n",
        "  plots(df,each)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "Qme9wrFMWqPo",
        "outputId": "64bfd783-e6ad-4ae0-c12c-dd77373a8521"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "feature 0\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1080x432 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "feature 1\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1080x432 with 2 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "feature 2\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1080x432 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "feature 3\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1080x432 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "feature 4\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1080x432 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "feature 5\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1080x432 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "feature 6\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1080x432 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "feature 7\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1080x432 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "feature 8\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1080x432 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "feature 9\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1080x432 with 2 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "feature 10\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1080x432 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "feature 11\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1080x432 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "feature 12\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1080x432 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "feature 13\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1080x432 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "feature 14\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1080x432 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "feature 15\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1080x432 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "feature 16\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1080x432 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "feature 17\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1080x432 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "feature 18\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1080x432 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "feature 19\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1080x432 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns_plot = sns.pairplot(df,hue='feature 1')\n",
        "sns_plot"
      ],
      "metadata": {
        "id": "ISx-MphEY62Q"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Feature Engineering"
      ],
      "metadata": {
        "id": "9cL4Gb7L5dxF"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "##Rare Labels"
      ],
      "metadata": {
        "id": "Ojot6_8z_s8P"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "cols_to_use = ['feature 10', 'feature 18', 'feature 6', 'feature 2']\n",
        "\n",
        "for col in cols_to_use:\n",
        "    print('variable: ', col, ' number of labels: ', len(df[col].unique()))\n",
        "\n",
        "print('total students: ', len(df))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sLjbEafR_vXp",
        "outputId": "4168e6a4-845b-42d4-8168-75be451228e3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "variable:  feature 10  number of labels:  4\n",
            "variable:  feature 18  number of labels:  5\n",
            "variable:  feature 6  number of labels:  8\n",
            "variable:  feature 2  number of labels:  8\n",
            "total students:  45\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# let's plot how frequently each label\n",
        "# appears in the dataset\n",
        "\n",
        "\n",
        "total_students = len(df)\n",
        "\n",
        "# for each categorical variable\n",
        "for col in cols_to_use:\n",
        "\n",
        "    # count the number of students per feature\n",
        "    # and divide by total students\n",
        "\n",
        "    # aka percentage of students per feature\n",
        "\n",
        "    temp_df = pd.Series(df[col].value_counts() / total_students)\n",
        "\n",
        "    # make plot with the above percentages\n",
        "    fig = temp_df.sort_values(ascending=False).plot.bar()\n",
        "    fig.set_xlabel(col)\n",
        "\n",
        "    # add a line at 5 %\n",
        "    fig.axhline(y=0.05, color='red')\n",
        "    fig.set_ylabel('percentage of students')\n",
        "    plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "-7xgE98CAUO4",
        "outputId": "ef70d611-a803-433f-90a1-c6f6372f8c7d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "For each of the above categorical variables, some labels appear in more than 10% of the students and many appear in less than 10% or even 5% of the students. These are infrequent labels or Rare Values and could cause over-fitting."
      ],
      "metadata": {
        "id": "xhaDq4bUKVLc"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "How is the target, assume \"feature 14\"(as it seems to be nondiscrete), related to these categories?  \n",
        "In the following cells, I would like to understand the mean value of feature 14  that present on average, the students that display the different categories."
      ],
      "metadata": {
        "id": "vhkCe8EyKhHX"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# the following function calculates:\n",
        "\n",
        "# 1) the percentage of students per category\n",
        "# 2) the mean value of feature 14 per category\n",
        "\n",
        "\n",
        "def calculate_perc_and_value(df, var):\n",
        "\n",
        "    # total number of students\n",
        "    total_students = len(df)\n",
        "\n",
        "    # percentage of cars per category\n",
        "    temp_df = pd.Series(df[var].value_counts() / total_students).reset_index()\n",
        "    temp_df.columns = [var, 'perc_students']\n",
        "\n",
        "    # add the mean \n",
        "    # the target in this dataset is called 'y' or feature 14\n",
        "    temp_df = temp_df.merge(df.groupby([var])['feature 14'].mean().reset_index(),\n",
        "                            on=var,\n",
        "                            how='left')\n",
        "\n",
        "    return temp_df\n",
        "\n",
        "\n",
        "# now we use the function for the variable 'X3'\n",
        "temp_df = calculate_perc_and_value(df, 'feature 6')\n",
        "temp_df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "-FB-RM8SKcI4",
        "outputId": "6ebb08d0-dbbe-400c-f36c-4b873a2a0065"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   feature 6  perc_students  feature 14\n",
              "0          0       0.644444   15.310345\n",
              "1         11       0.155556   10.857143\n",
              "2          3       0.066667    9.666667\n",
              "3          6       0.044444    5.000000\n",
              "4          9       0.022222    7.000000\n",
              "5          1       0.022222    0.000000\n",
              "6          7       0.022222    0.000000\n",
              "7         10       0.022222   19.000000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-7fbdeeef-8731-4209-8b41-cca7943fd9b9\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>feature 6</th>\n",
              "      <th>perc_students</th>\n",
              "      <th>feature 14</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>0.644444</td>\n",
              "      <td>15.310345</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>11</td>\n",
              "      <td>0.155556</td>\n",
              "      <td>10.857143</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>0.066667</td>\n",
              "      <td>9.666667</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>6</td>\n",
              "      <td>0.044444</td>\n",
              "      <td>5.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>9</td>\n",
              "      <td>0.022222</td>\n",
              "      <td>7.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>1</td>\n",
              "      <td>0.022222</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>7</td>\n",
              "      <td>0.022222</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>10</td>\n",
              "      <td>0.022222</td>\n",
              "      <td>19.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7fbdeeef-8731-4209-8b41-cca7943fd9b9')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-7fbdeeef-8731-4209-8b41-cca7943fd9b9 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-7fbdeeef-8731-4209-8b41-cca7943fd9b9');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 61
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "The above dataframe contains the percentage of students that show each one of the labels in feature 6, and the mean value of feature 14 for those students. In other words, ~64% of students in the dataset show the label 0 for feature 6, and a mean value of feature 14 of 15.31."
      ],
      "metadata": {
        "id": "e27Zpi89Mqjx"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Now I create a function to plot of the\n",
        "# label frequency and mean value of feature 14.\n",
        "\n",
        "# This will help us visualise the relationship between the\n",
        "# target and the labels\n",
        "\n",
        "def plot_categories(df, var):\n",
        "    \n",
        "    fig, ax = plt.subplots(figsize=(8, 4))\n",
        "    plt.xticks(df.index, df[var], rotation=0)\n",
        "\n",
        "    ax2 = ax.twinx()\n",
        "    ax.bar(df.index, df[\"perc_students\"], color='lightgrey')\n",
        "    ax2.plot(df.index, df[\"feature 14\"], color='green')\n",
        "    ax.axhline(y=0.05, color='red')\n",
        "    ax.set_ylabel('percentage of students per category')\n",
        "    ax.set_xlabel(var)\n",
        "    ax2.set_ylabel('target')\n",
        "    plt.show()"
      ],
      "metadata": {
        "id": "3RAeh-xWNTDE"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "plot_categories(temp_df, 'feature 6')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        },
        "id": "PKFCKbCJOH0G",
        "outputId": "1a5d83da-04e4-45c8-8f47-d67e0e773a20"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 576x288 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "students where feature 6 is 1&7 have smaller target value, whereas students with the category 10 take larger value of target.\n",
        "\n",
        "students where feature 6 is 9, take target value around 7.5. However, 9 is present in less than 5% of the students. Why is this important? Because if we do not have a lot of students to learn from, we could be under or over-estimating the effect if 9 on the target value.\n",
        "\n",
        "In other words, how confident am I to generalise that students with the label 9 for feature 6 take around 7.5 , when I only have a few students to learn from?"
      ],
      "metadata": {
        "id": "p1F-3DroPdJs"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# let's plot the remaining categorical variables\n",
        "\n",
        "for col in cols_to_use:\n",
        "    \n",
        "    if col !='feature 6':\n",
        "        \n",
        "        # re using the functions I created\n",
        "        temp_df = calculate_perc_and_value(df, col)\n",
        "        plot_categories(temp_df, col)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 811
        },
        "id": "YPCgS7ANQk22",
        "outputId": "807b09fd-2245-4072-fe3a-4d93f375bb83"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 576x288 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 576x288 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 576x288 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Let's look at variable feature 18: Most of the categories in feature 18 are present n less than 2% of students. In addition, \"target\" varies across those rare categories. The mean value of target goes up and down over the infrequent categories. In fact, it looks noisy. This rare labels could indeed be very predictive, or they could be introducing noise rather than information. And because the labels are under-represented, we can't be sure whether they have a true impact on the assumed target (feature 14). We could be under or over-estimating their impact due to the fact that we have information for few students.  \n",
        "One logical solution, is  change Rare labels by grouping under a new label. However due to lack of info I wouldnt go further."
      ],
      "metadata": {
        "id": "2-QKjnXYSb9N"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Split test & train"
      ],
      "metadata": {
        "id": "Q8uviWyyifUT"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "train=df.sample(frac=0.8,random_state=200)\n",
        "test=df.drop(train.index)"
      ],
      "metadata": {
        "id": "Rean3Dj0_e_o"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "train.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mnqi16cdPgGH",
        "outputId": "9eb24e8a-5134-4064-c4ce-d9cae9f452b9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(36, 20)"
            ]
          },
          "metadata": {},
          "execution_count": 80
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xPfp_UFsPh47",
        "outputId": "a274e58c-614a-4f9c-935a-05a2312a85d9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(45, 20)"
            ]
          },
          "metadata": {},
          "execution_count": 81
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "test.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Nh9MkmbhPmXl",
        "outputId": "d7db7318-d126-4a0a-b8e0-c7eccae2c662"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(9, 20)"
            ]
          },
          "metadata": {},
          "execution_count": 82
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Feature Selection & Extraction"
      ],
      "metadata": {
        "id": "UsC3IjeCnqX1"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "##Basic Methods"
      ],
      "metadata": {
        "id": "8adjjUtBYO67"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "###Constant features"
      ],
      "metadata": {
        "id": "3WDkooX1uVFf"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Constant features are those that show the same value, just one value, for all the observations of the dataset. This is, the same value for all the rows of the dataset. These features provide no information that allows a machine learning model to discriminate or predict a target."
      ],
      "metadata": {
        "id": "P-kKiNK2gJy1"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#assume feature 5 as target value which is not constant or Quasi-constant\n",
        "X_train, X_test, y_train, y_test = train_test_split(\n",
        "    df.drop(labels=['feature 5'], axis=1),\n",
        "    df['feature 5'],\n",
        "    test_size=0.2,\n",
        "    random_state=0)\n",
        "\n",
        "X_train.shape, X_test.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "t8OE2Ebjaj_B",
        "outputId": "6bdb7a7d-f28d-46c3-ae30-3e171eff8518"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "((36, 19), (9, 19))"
            ]
          },
          "metadata": {},
          "execution_count": 83
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sel = VarianceThreshold(threshold=0)\n",
        "sel.fit(X_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TH0IrVVpvG1r",
        "outputId": "ee223111-bfe9-4904-ffcb-af08cccba7d8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "VarianceThreshold(threshold=0)"
            ]
          },
          "metadata": {},
          "execution_count": 90
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# get_support is a boolean vector that indicates which features are retained\n",
        "# if we sum over get_support, we get the number of features that are not constant\n",
        "sum(sel.get_support())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jNVTsIb5v7p8",
        "outputId": "486d45cd-1a9e-4a07-95f4-63c28f59fff6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "18"
            ]
          },
          "metadata": {},
          "execution_count": 91
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# another way of finding non-constant features is like this:\n",
        "len(X_train.columns[sel.get_support()])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xyrkvxwBwBQL",
        "outputId": "7e23d76a-f300-4d9e-98eb-0c467af655d3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "18"
            ]
          },
          "metadata": {},
          "execution_count": 92
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# finally we can print the constant features\n",
        "print(\n",
        "    len([\n",
        "        x for x in X_train.columns\n",
        "        if x not in X_train.columns[sel.get_support()]\n",
        "    ]))\n",
        "\n",
        "[x for x in X_train.columns if x not in X_train.columns[sel.get_support()]]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Q-KToc6CwLbx",
        "outputId": "9ec2a7df-ae44-4953-bed9-9187acdbeca6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['feature 11']"
            ]
          },
          "metadata": {},
          "execution_count": 93
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "We can see that 2 columns / variables are constant. This means that 2 variables show the same value, just one value, for all the observations of the training set."
      ],
      "metadata": {
        "id": "IHC_9LlVwfWF"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# let's visualise the values of one of the constant variables\n",
        "# as an example\n",
        "\n",
        "X_train['feature 11'].unique()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jhNY4n9Awe55",
        "outputId": "fe5cb296-a3b5-444c-a574-51e1b0b716f4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([1])"
            ]
          },
          "metadata": {},
          "execution_count": 95
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "###Quasi-constant features"
      ],
      "metadata": {
        "id": "W9oVXvcdw52K"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Quasi-constant features are those that show the same value for the great majority of the observations of the dataset"
      ],
      "metadata": {
        "id": "o2UCHU0jygKB"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "sel = VarianceThreshold(\n",
        "    threshold=0.01)  # 0.1 indicates 99% of observations approximately\n",
        "\n",
        "sel.fit(X_train)  # fit finds the features with low variance"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9FFW0TSXw8SD",
        "outputId": "c2e5210b-9f0d-4445-8aaf-578ff5a7e343"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "VarianceThreshold(threshold=0.01)"
            ]
          },
          "metadata": {},
          "execution_count": 97
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# get_support is a boolean vector that indicates which features \n",
        "# are retained. If we sum over get_support, we get the number\n",
        "# of features that are not quasi-constant\n",
        "sum(sel.get_support())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BB6MB7xXzfm9",
        "outputId": "0db8d033-eeb3-4c09-a034-2125b711a6f5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "18"
            ]
          },
          "metadata": {},
          "execution_count": 98
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# finally we can print the quasi-constant features\n",
        "print(\n",
        "    len([\n",
        "        x for x in X_train.columns\n",
        "        if x not in X_train.columns[sel.get_support()]\n",
        "    ]))\n",
        "\n",
        "[x for x in X_train.columns if x not in X_train.columns[sel.get_support()]]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HcyChKwazpwa",
        "outputId": "09ed15e6-a99e-420f-e8d7-72978a9588f5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['feature 11']"
            ]
          },
          "metadata": {},
          "execution_count": 99
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train['feature 19'].value_counts() / np.float(len(train))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "J13SQS2I0Ss3",
        "outputId": "4b79a0fd-3555-4be2-8948-4aee93e16d1e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:1: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
            "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
            "  \"\"\"Entry point for launching an IPython kernel.\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1    0.972222\n",
              "0    0.027778\n",
              "Name: feature 19, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 100
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "quasi_features=[x for x in X_train.columns if x not in X_train.columns[sel.get_support()]]\n",
        "X_train=X_train.drop(quasi_features, axis=1)\n",
        "X_test=X_test.drop(quasi_features, axis=1)\n",
        "\n",
        "X_train.columns"
      ],
      "metadata": {
        "id": "ns_LD9wiwu6E",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "99a9587d-5ce3-45b9-f15c-0e27570d59ac"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['feature 0', 'feature 1', 'feature 2', 'feature 3', 'feature 4',\n",
              "       'feature 6', 'feature 7', 'feature 8', 'feature 9', 'feature 10',\n",
              "       'feature 12', 'feature 13', 'feature 14', 'feature 15', 'feature 16',\n",
              "       'feature 17', 'feature 18', 'feature 19'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 102
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "###Correlation"
      ],
      "metadata": {
        "id": "qNqpIvSYZsQG"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#assume one of the features as target ex; feature 1\n",
        "# separate train and test sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(\n",
        "    train.drop(labels=['feature 1','feature 11'], axis=1),\n",
        "    train[['feature 1']],\n",
        "    test_size=0.3,\n",
        "    random_state=0)\n",
        "corrmat = X_train.corr()\n",
        "fig, ax = plt.subplots()\n",
        "fig.set_size_inches(11,11)\n",
        "sns.heatmap(corrmat)\n",
        "  "
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 709
        },
        "id": "fnzmZL1dZuWT",
        "outputId": "aec0c22f-4a27-4f21-8e9a-31d24def0448"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7ffa627d9050>"
            ]
          },
          "metadata": {},
          "execution_count": 111
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 792x792 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# with the following function we can select highly correlated features\n",
        "# it will remove the first feature that is correlated with anything else\n",
        "# without any other insight.\n",
        "\n",
        "def correlation(dataset, threshold):\n",
        "    col_corr = set()  # Set of all the names of correlated columns\n",
        "    corr_matrix = dataset.corr()\n",
        "    for i in range(len(corr_matrix.columns)):\n",
        "        for j in range(i):\n",
        "            if abs(corr_matrix.iloc[i, j]) > threshold: # we are interested in absolute coeff value\n",
        "                colname = corr_matrix.columns[i]  # getting the name of column\n",
        "                col_corr.add(colname)\n",
        "    return col_corr"
      ],
      "metadata": {
        "id": "YGsu_Vk-dBdW"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "corr_features = correlation(X_train, 0.8)\n",
        "len(set(corr_features))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rFDkOCtMdMPh",
        "outputId": "fd20d2c8-84fa-41df-a1bc-e65f281d24f1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1"
            ]
          },
          "metadata": {},
          "execution_count": 113
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(corr_features)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JLna0NeVddc4",
        "outputId": "650aaf52-5203-48d6-852e-60e55e7b1275"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'feature 8'}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##Wrapper Methods"
      ],
      "metadata": {
        "id": "DuS0EOVpYeqS"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Step forward feature selection"
      ],
      "metadata": {
        "id": "ICesmpZ7pPRY"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Forward selection starts with no parameters, then tests each parameter individually. The parameter with the smallest (read: most significant) p-value that is below the significance level is chosen to be added. Then this process repeats until no parameters are below the significance level."
      ],
      "metadata": {
        "id": "GFWdr2UZxBxM"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "x_train=train.drop(['feature 1','feature 11'],axis=1)\n",
        "x_test=test.drop(['feature 1','feature 11'],axis=1)\n",
        "y_train=pd.DataFrame(train['feature 1'])\n",
        "y_test=pd.DataFrame(test['feature 1'])"
      ],
      "metadata": {
        "id": "c78ZZdfH9rAW"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "x_train.columns"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lr0EGs7WgbPw",
        "outputId": "8e13d7f8-7943-472a-b47e-5d172fda2d0e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['feature 0', 'feature 2', 'feature 3', 'feature 4', 'feature 5',\n",
              "       'feature 6', 'feature 7', 'feature 8', 'feature 9', 'feature 10',\n",
              "       'feature 12', 'feature 13', 'feature 14', 'feature 15', 'feature 16',\n",
              "       'feature 17', 'feature 18', 'feature 19'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 121
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# find and remove correlated features\n",
        "# in order to reduce the feature space a bit\n",
        "# so that the algorithm takes shorter\n",
        "x_train=x_train.drop(['feature 8'],axis=1)\n",
        "x_test=x_test.drop(['feature 8'],axis=1)"
      ],
      "metadata": {
        "id": "yDWugphyfaJb"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(x_train.shape)\n",
        "print(y_train.shape)\n",
        "\n",
        "if x_train.shape[0] != y_train.shape[0]:\n",
        "  print(\"X and y rows are mismatched, check dataset again\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tszqjnt6mgAG",
        "outputId": "9ab7e98f-21e3-45d8-e1b9-e050a1307e58"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(36, 17)\n",
            "(36, 1)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "sfs1 = SFS(RandomForestClassifier(n_jobs=4), \n",
        "           k_features=2, \n",
        "           forward=True, \n",
        "           floating=False, \n",
        "           verbose=2,\n",
        "           scoring='roc_auc',\n",
        "           cv=3)\n",
        "\n",
        "sfs1 = sfs1.fit(np.array(x_train.fillna(0)), np.ravel(y_train,order='C'))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mnnOWrPriyUC",
        "outputId": "34f5dcbd-9a35-458a-f1dc-1f0d531639c7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n",
            "[Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:    3.3s remaining:    0.0s\n",
            "[Parallel(n_jobs=1)]: Done  17 out of  17 | elapsed:   21.6s finished\n",
            "\n",
            "[2022-07-13 08:14:02] Features: 1/2 -- score: 1.0[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n",
            "[Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:    1.1s remaining:    0.0s\n",
            "[Parallel(n_jobs=1)]: Done  16 out of  16 | elapsed:   18.1s finished\n",
            "\n",
            "[2022-07-13 08:14:20] Features: 2/2 -- score: 1.0"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "selected_feat= x_train.columns[list(sfs1.k_feature_idx_)] #it will return index of selected features\n",
        "selected_feat"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hdg-Mslrlxj7",
        "outputId": "c924d551-a42f-437c-b868-13b8ce365549"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['feature 3', 'feature 14'], dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 125
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def run_randomForests(X_train, X_test, y_train, y_test):\n",
        "    rf = RandomForestClassifier(n_estimators=200, random_state=39, max_depth=4)\n",
        "    rf.fit(X_train, y_train)\n",
        "    print('Train set')\n",
        "    pred = rf.predict_proba(X_train)\n",
        "    print('Random Forests roc-auc: {}'.format(roc_auc_score(y_train, pred[:,1])))\n",
        "    print('Test set')\n",
        "    pred = rf.predict_proba(X_test)\n",
        "    print('Random Forests roc-auc: {}'.format(roc_auc_score(y_test, pred[:,1])))"
      ],
      "metadata": {
        "id": "iuBiOmd1l-3q"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# evaluate performance of algorithm built\n",
        "# using selected features\n",
        "\n",
        "run_randomForests(x_train[selected_feat].fillna(0),\n",
        "                  x_test[selected_feat].fillna(0),\n",
        "                  y_train, y_test)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sM8ovPmXmGJK",
        "outputId": "ef87a1f1-dd5d-4a36-a292-11e9555ae2b3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:3: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
            "  This is separate from the ipykernel package so we can avoid doing imports until\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Train set\n",
            "Random Forests roc-auc: 1.0\n",
            "Test set\n",
            "Random Forests roc-auc: 1.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "###Exhaustive feature selection"
      ],
      "metadata": {
        "id": "AopVcPg6mV4v"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "In an exhaustive feature selection the best subset of features is selected, over all possible feature subsets, by optimizing a specified performance metric for a certain machine learning algorithm."
      ],
      "metadata": {
        "id": "KbDuQ4Z3o7uA"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "efs1 = EFS(RandomForestClassifier(n_estimators=10,n_jobs=4, random_state=0), \n",
        "           min_features=1,\n",
        "           max_features=4, \n",
        "           scoring='roc_auc',\n",
        "           print_progress=True,\n",
        "           cv=2)\n",
        "\n",
        "efs1 = efs1.fit(np.array(x_train[x_train.columns[0:4]].fillna(0)), np.ravel(y_train,order='C'))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DZzaVxtQmZdt",
        "outputId": "17b52aa9-0067-466c-af99-a74a34e9745b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Features: 15/15"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "efs1.best_idx_"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5MExEniXqEoS",
        "outputId": "f724d1b3-6383-4ceb-f7c6-8185f87d2049"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(0, 1, 3)"
            ]
          },
          "metadata": {},
          "execution_count": 129
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "selected_feat= x_train.columns[list(efs1.best_idx_)]\n",
        "selected_feat"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "m1aRDtpFqlpB",
        "outputId": "90741430-29f5-4bf9-b331-7af854736651"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['feature 0', 'feature 2', 'feature 4'], dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 130
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "run_randomForests(x_train[selected_feat].fillna(0),\n",
        "                  x_test[selected_feat].fillna(0),\n",
        "                  y_train, y_test)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Gu-yAVyUquA_",
        "outputId": "34d17c28-fb00-4cd0-d30c-b56fe2d49217"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:3: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
            "  This is separate from the ipykernel package so we can avoid doing imports until\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Train set\n",
            "Random Forests roc-auc: 0.828125\n",
            "Test set\n",
            "Random Forests roc-auc: 0.7777777777777778\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "list(efs1.best_idx_)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "b_S0CZ8oq-LK",
        "outputId": "76e1d5db-a04b-494e-89df-b24fc8ce3e0d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[0, 1, 3]"
            ]
          },
          "metadata": {},
          "execution_count": 132
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "###Recursive feature selection"
      ],
      "metadata": {
        "id": "WBOdPMTYreJA"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "sel_ = RFE(RandomForestClassifier(n_estimators=100), n_features_to_select=2)\n",
        "sel_.fit(x_train.fillna(0), np.ravel(y_train,order='C'))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_e1IZTp4rgNV",
        "outputId": "490c6dcd-842a-47b7-c392-8323a4186234"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "RFE(estimator=RandomForestClassifier(), n_features_to_select=2)"
            ]
          },
          "metadata": {},
          "execution_count": 133
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# this command let's me visualise those features that were selected.\n",
        "sel_.get_support()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UJ9VTLMDuA9S",
        "outputId": "d148a8f1-730f-4013-a574-1a035902e1a5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([False, False, False, False, False, False, False, False, False,\n",
              "       False,  True,  True, False, False, False, False, False])"
            ]
          },
          "metadata": {},
          "execution_count": 134
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# let's add the variable names and order it for clearer visualisation\n",
        "selected_feat = x_train.columns[(sel_.get_support())]\n",
        "len(selected_feat)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8yn5LNNAuMlp",
        "outputId": "c546b712-b242-4de7-9623-5f973b3b96db"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "2"
            ]
          },
          "metadata": {},
          "execution_count": 135
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# let's display the list of features\n",
        "selected_feat"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XaSNHdRmuROS",
        "outputId": "72ef462c-32b5-453b-c448-985877b74f68"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['feature 13', 'feature 14'], dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 136
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "run_randomForests(x_train[selected_feat].fillna(0),\n",
        "                  x_test[selected_feat].fillna(0),\n",
        "                  y_train, y_test)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ADfNduBkuXfC",
        "outputId": "6a4b6aef-f728-40a6-b692-f18817536f20"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:3: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
            "  This is separate from the ipykernel package so we can avoid doing imports until\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Train set\n",
            "Random Forests roc-auc: 1.0\n",
            "Test set\n",
            "Random Forests roc-auc: 1.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##Univariate feature selection"
      ],
      "metadata": {
        "id": "2pgUppYwxvEd"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "###Select kbest"
      ],
      "metadata": {
        "id": "0uUvm1wcYyq9"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# select the two best features\n",
        "X_new = SelectKBest(chi2, k=2).fit_transform(x_train, y_train)\n",
        "X_new.shape"
      ],
      "metadata": {
        "id": "pmWF-E-LYr5h",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "40312a32-fc6d-4c93-b203-3bb6d3d18124"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(36, 2)"
            ]
          },
          "metadata": {},
          "execution_count": 138
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "###SelectPercentile"
      ],
      "metadata": {
        "id": "Nm7LuLJ0ZT7T"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# now select features based on top 10 percentile\n",
        "X_new = SelectPercentile(chi2, percentile=10).fit_transform(x_train, y_train)\n",
        "X_new.shape"
      ],
      "metadata": {
        "id": "8ZVz67ZcZQpL",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d4bc145c-a252-4ce9-e5dd-111908a19323"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(36, 2)"
            ]
          },
          "metadata": {},
          "execution_count": 140
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### ROC-AUC Score"
      ],
      "metadata": {
        "id": "il3acxPUnuxR"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def roc_auc_metric(x_train,y_train,x_test,y_test):\n",
        "  roc_auc=[]\n",
        "  for feature in x_train.iloc[:].columns:\n",
        "    clf = LogisticRegression(solver=\"liblinear\", random_state=0)\n",
        "    clf.fit(x_train[feature].to_frame(),y_train )\n",
        "    y_pred=clf.predict(x_test[feature].to_frame())\n",
        "    roc_auc.append(roc_auc_score(y_test, y_pred))\n",
        "\n",
        "  roc_values = pd.Series(roc_auc)\n",
        "  roc_values.index=x_train.columns\n",
        "  roc_values.sort_values(ascending=False, inplace=True)  \n",
        "\n",
        "  return roc_values\n"
      ],
      "metadata": {
        "id": "MVD8NB3noQUt"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "\n",
        "roc_auc_metric(x_train,np.ravel(y_train,order='C'),x_test,y_test)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gdc-flA3DK3y",
        "outputId": "39264e51-3af8-4ea8-bec4-a867600c9695"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "feature 9     0.750000\n",
              "feature 13    0.750000\n",
              "feature 2     0.750000\n",
              "feature 14    0.583333\n",
              "feature 0     0.500000\n",
              "feature 18    0.500000\n",
              "feature 15    0.500000\n",
              "feature 10    0.500000\n",
              "feature 6     0.500000\n",
              "feature 5     0.500000\n",
              "feature 4     0.500000\n",
              "feature 3     0.500000\n",
              "feature 19    0.500000\n",
              "feature 7     0.416667\n",
              "feature 12    0.416667\n",
              "feature 17    0.416667\n",
              "feature 16    0.333333\n",
              "dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 142
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#sel=forward_selection_pvalue(x_train,y_train)\n",
        "\n",
        "sel=['feature 2', 'feature 13','feature 9']\n",
        "\n",
        "X_train_roc=x_train[[c for c in x_train.columns if c in sel]]\n",
        "X_test_roc=x_test[[c for c in x_test.columns if c in sel]]"
      ],
      "metadata": {
        "id": "nuea3TL7C6lo"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "define logistic regression function for further uses"
      ],
      "metadata": {
        "id": "Txq-pQBIAxIC"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import precision_score, recall_score, f1_score\n",
        "def logistic_regression(X_train,X_test,y_train,y_test):\n",
        "  clf = LogisticRegression(solver=\"liblinear\", random_state=0)\n",
        "  clf.fit(X_train,y_train)\n",
        "  y_pred=clf.predict(X_test)\n",
        "  print('Precision: %.3f' % precision_score(y_test, y_pred))\n",
        "  print('Recall: %.3f' % recall_score(y_test, y_pred))\n",
        "  print('F1 Score: %.3f' % f1_score(y_test, y_pred))"
      ],
      "metadata": {
        "id": "N9HuERGMQBUJ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "logistic_regression(X_train_roc,X_test_roc,y_train,y_test)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0sAbBD_oQHrp",
        "outputId": "64055943-c30c-49fd-c01a-594f7e0e8581"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Precision: 0.750\n",
            "Recall: 1.000\n",
            "F1 Score: 0.857\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
            "  y = column_or_1d(y, warn=True)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        " if the number of false positives is the same as the number of false negatives, all three metrics have identical values."
      ],
      "metadata": {
        "id": "OyOEue_OEIHC"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "###ROC Curve"
      ],
      "metadata": {
        "id": "UJCiMSQlpt_Y"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "y_train=np.ravel(y_train,order='C')\n",
        "# Create the estimator - pipeline\n",
        "#\n",
        "pipeline = make_pipeline(StandardScaler(), LogisticRegression(random_state=1))\n",
        "#\n",
        "# Create training test splits using two features\n",
        "#\n",
        "pipeline.fit(x_train[['feature 2','feature 13']],y_train)\n",
        "probs = pipeline.predict_proba(x_test[['feature 2','feature 13']])\n",
        "fpr1, tpr1, thresholds = roc_curve(y_test, probs[:, 1], pos_label=1)\n",
        "roc_auc1 = auc(fpr1, tpr1)\n",
        "#\n",
        "# Create training test splits using two different features\n",
        "#\n",
        "pipeline.fit(x_train[['feature 9','feature 10']],y_train)\n",
        "probs2 = pipeline.predict_proba(x_test[['feature 9','feature 10']])\n",
        "fpr2, tpr2, thresholds = roc_curve(y_test, probs2[:, 1], pos_label=1)\n",
        "roc_auc2 = auc(fpr2, tpr2)\n",
        "#\n",
        "# Create training test splits using all features\n",
        "#\n",
        "pipeline.fit(x_train,y_train)\n",
        "probs3 = pipeline.predict_proba(x_test)\n",
        "fpr3, tpr3, thresholds = roc_curve(y_test, probs3[:, 1], pos_label=1)\n",
        "roc_auc3 = auc(fpr3, tpr3)\n",
        " \n",
        "fig, ax = plt.subplots(figsize=(7.5, 7.5))\n",
        " \n",
        "plt.plot(fpr1, tpr1, label='ROC Curve 1 (AUC = %0.2f)' % (roc_auc1))\n",
        "plt.plot(fpr2, tpr2, label='ROC Curve 2 (AUC = %0.2f)' % (roc_auc2))\n",
        "plt.plot(fpr3, tpr3, label='ROC Curve 3 (AUC = %0.2f)' % (roc_auc3))\n",
        "plt.plot([0, 1], [0, 1], linestyle='--', color='red', label='Random Classifier')   \n",
        "plt.plot([0, 0, 1], [0, 1, 1], linestyle=':', color='green', label='Perfect Classifier')\n",
        "plt.xlim([-0.05, 1.05])\n",
        "plt.ylim([-0.05, 1.05])\n",
        "plt.xlabel('False positive rate')\n",
        "plt.ylabel('True positive rate')\n",
        "plt.legend(loc=\"lower right\")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 470
        },
        "id": "l-xOFGJup0WK",
        "outputId": "22d0b25e-0c25-449a-d873-5682bd897587"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 540x540 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##Embedded Methods"
      ],
      "metadata": {
        "id": "AQ1aDaqmqWo6"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "###Ridge Regression"
      ],
      "metadata": {
        "id": "bMjknuxXQz9D"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "alphas = 10**np.linspace(10,-2,100)*0.5\n",
        "alphas"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4h0acI46RAJc",
        "outputId": "3fb9dba3-6e68-439d-d11c-eb253c45c5eb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([5.00000000e+09, 3.78231664e+09, 2.86118383e+09, 2.16438064e+09,\n",
              "       1.63727458e+09, 1.23853818e+09, 9.36908711e+08, 7.08737081e+08,\n",
              "       5.36133611e+08, 4.05565415e+08, 3.06795364e+08, 2.32079442e+08,\n",
              "       1.75559587e+08, 1.32804389e+08, 1.00461650e+08, 7.59955541e+07,\n",
              "       5.74878498e+07, 4.34874501e+07, 3.28966612e+07, 2.48851178e+07,\n",
              "       1.88246790e+07, 1.42401793e+07, 1.07721735e+07, 8.14875417e+06,\n",
              "       6.16423370e+06, 4.66301673e+06, 3.52740116e+06, 2.66834962e+06,\n",
              "       2.01850863e+06, 1.52692775e+06, 1.15506485e+06, 8.73764200e+05,\n",
              "       6.60970574e+05, 5.00000000e+05, 3.78231664e+05, 2.86118383e+05,\n",
              "       2.16438064e+05, 1.63727458e+05, 1.23853818e+05, 9.36908711e+04,\n",
              "       7.08737081e+04, 5.36133611e+04, 4.05565415e+04, 3.06795364e+04,\n",
              "       2.32079442e+04, 1.75559587e+04, 1.32804389e+04, 1.00461650e+04,\n",
              "       7.59955541e+03, 5.74878498e+03, 4.34874501e+03, 3.28966612e+03,\n",
              "       2.48851178e+03, 1.88246790e+03, 1.42401793e+03, 1.07721735e+03,\n",
              "       8.14875417e+02, 6.16423370e+02, 4.66301673e+02, 3.52740116e+02,\n",
              "       2.66834962e+02, 2.01850863e+02, 1.52692775e+02, 1.15506485e+02,\n",
              "       8.73764200e+01, 6.60970574e+01, 5.00000000e+01, 3.78231664e+01,\n",
              "       2.86118383e+01, 2.16438064e+01, 1.63727458e+01, 1.23853818e+01,\n",
              "       9.36908711e+00, 7.08737081e+00, 5.36133611e+00, 4.05565415e+00,\n",
              "       3.06795364e+00, 2.32079442e+00, 1.75559587e+00, 1.32804389e+00,\n",
              "       1.00461650e+00, 7.59955541e-01, 5.74878498e-01, 4.34874501e-01,\n",
              "       3.28966612e-01, 2.48851178e-01, 1.88246790e-01, 1.42401793e-01,\n",
              "       1.07721735e-01, 8.14875417e-02, 6.16423370e-02, 4.66301673e-02,\n",
              "       3.52740116e-02, 2.66834962e-02, 2.01850863e-02, 1.52692775e-02,\n",
              "       1.15506485e-02, 8.73764200e-03, 6.60970574e-03, 5.00000000e-03])"
            ]
          },
          "metadata": {},
          "execution_count": 147
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X = df[['feature 2',\n",
        "          'feature 9',\n",
        "          'feature 13',\n",
        "          'feature 14'\n",
        "          ]]\n",
        "y = df['feature 5']"
      ],
      "metadata": {
        "id": "TJHHRJFKRnPI"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "ridge = Ridge(normalize = True)\n",
        "coefs = []\n",
        "\n",
        "for a in alphas:\n",
        "    ridge.set_params(alpha = a)\n",
        "    ridge.fit(X, y)\n",
        "    coefs.append(ridge.coef_)\n",
        "    \n",
        "np.shape(coefs)"
      ],
      "metadata": {
        "id": "AUfoj3mNReHz"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "ax = plt.gca()\n",
        "ax.plot(alphas, coefs)\n",
        "ax.set_xscale('log')\n",
        "plt.axis('tight')\n",
        "plt.xlabel('alpha')\n",
        "plt.ylabel('weights')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "rxb735OGRxVr",
        "outputId": "792c3508-a504-464a-97b6-4c0cbf950951"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0, 0.5, 'weights')"
            ]
          },
          "metadata": {},
          "execution_count": 153
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=101)"
      ],
      "metadata": {
        "id": "z5a4bUHLRStt"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "ridge2 = Ridge(alpha = 4, normalize = True)\n",
        "ridge2.fit(X_train, y_train)             # Fit a ridge regression on the training data\n",
        "pred2 = ridge2.predict(X_test)           # Use this model to predict the test data\n",
        "print(pd.Series(ridge2.coef_, index = X.columns)) # Print coefficients\n",
        "print(mean_squared_error(y_test, pred2))          # Calculate the test MSE"
      ],
      "metadata": {
        "id": "gQ_4EnWaR-OK"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "ridge3 = Ridge(alpha = 10**10, normalize = True)\n",
        "ridge3.fit(X_train, y_train)             # Fit a ridge regression on the training data\n",
        "pred3 = ridge3.predict(X_test)           # Use this model to predict the test data\n",
        "print(pd.Series(ridge3.coef_, index = X.columns)) # Print coefficients\n",
        "print(mean_squared_error(y_test, pred3))          # Calculate the test MSE"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "AI3jyZruSPkp",
        "outputId": "a3e90a38-dcaf-4c2c-8dd8-63bce91ef9e6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "feature 2     3.153153e-11\n",
            "feature 9    -5.594166e-21\n",
            "feature 13    1.134145e-11\n",
            "feature 14    1.493348e-11\n",
            "dtype: float64\n",
            "24.999999999937707\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n",
            "If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n",
            "\n",
            "from sklearn.pipeline import make_pipeline\n",
            "\n",
            "model = make_pipeline(StandardScaler(with_mean=False), Ridge())\n",
            "\n",
            "If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n",
            "\n",
            "kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n",
            "model.fit(X, y, **kwargs)\n",
            "\n",
            "Set parameter alpha to: original_alpha * n_samples. \n",
            "  FutureWarning,\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "ridge2 = Ridge(alpha = 0, normalize = True)\n",
        "ridge2.fit(X_train, y_train)             # Fit a ridge regression on the training data\n",
        "pred = ridge2.predict(X_test)            # Use this model to predict the test data\n",
        "print(pd.Series(ridge2.coef_, index = X.columns)) # Print coefficients\n",
        "print(mean_squared_error(y_test, pred))           # Calculate the test MSE"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XXnZVbydSTeZ",
        "outputId": "cf756b1e-8c51-465a-ce14-a37c3192e86b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "feature 2     0.188686\n",
            "feature 9    -0.098395\n",
            "feature 13    0.000181\n",
            "feature 14    0.140142\n",
            "dtype: float64\n",
            "25.442124025995646\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n",
            "If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n",
            "\n",
            "from sklearn.pipeline import make_pipeline\n",
            "\n",
            "model = make_pipeline(StandardScaler(with_mean=False), Ridge())\n",
            "\n",
            "If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n",
            "\n",
            "kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n",
            "model.fit(X, y, **kwargs)\n",
            "\n",
            "Set parameter alpha to: original_alpha * n_samples. \n",
            "  FutureWarning,\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "ridgecv = RidgeCV(alphas = alphas, scoring = 'neg_mean_squared_error', normalize = True)\n",
        "ridgecv.fit(X_train, y_train)\n",
        "ridgecv.alpha_"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4fYkGjOrSc2-",
        "outputId": "0117b7f1-2374-4399-f308-2cdb406ffad3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n",
            "If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n",
            "\n",
            "from sklearn.pipeline import make_pipeline\n",
            "\n",
            "model = make_pipeline(StandardScaler(with_mean=False), _RidgeGCV())\n",
            "\n",
            "If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n",
            "\n",
            "kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n",
            "model.fit(X, y, **kwargs)\n",
            "\n",
            "\n",
            "  FutureWarning,\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "3.0679536367065814"
            ]
          },
          "metadata": {},
          "execution_count": 159
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "ridge4 = Ridge(alpha = ridgecv.alpha_, normalize = True)\n",
        "ridge4.fit(X_train, y_train)\n",
        "mean_squared_error(y_test, ridge4.predict(X_test))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vCusqdeGSjVL",
        "outputId": "ada3e717-32ae-4031-98c3-a2f1627b3f94"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n",
            "If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n",
            "\n",
            "from sklearn.pipeline import make_pipeline\n",
            "\n",
            "model = make_pipeline(StandardScaler(with_mean=False), Ridge())\n",
            "\n",
            "If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n",
            "\n",
            "kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n",
            "model.fit(X, y, **kwargs)\n",
            "\n",
            "Set parameter alpha to: original_alpha * n_samples. \n",
            "  FutureWarning,\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "25.004967490691286"
            ]
          },
          "metadata": {},
          "execution_count": 160
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "ridge4.fit(X, y)\n",
        "pd.Series(ridge4.coef_, index = X.columns)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5dkVLa6QSqUv",
        "outputId": "c46aa68b-fca6-4a74-c45f-fe91f32a6c4f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n",
            "If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n",
            "\n",
            "from sklearn.pipeline import make_pipeline\n",
            "\n",
            "model = make_pipeline(StandardScaler(with_mean=False), Ridge())\n",
            "\n",
            "If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n",
            "\n",
            "kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n",
            "model.fit(X, y, **kwargs)\n",
            "\n",
            "Set parameter alpha to: original_alpha * n_samples. \n",
            "  FutureWarning,\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "feature 2     0.069523\n",
              "feature 9     0.046551\n",
              "feature 13    0.017912\n",
              "feature 14    0.027917\n",
              "dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 161
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "###Lasso"
      ],
      "metadata": {
        "id": "bILSnZ6dvW4Q"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "lasso = Lasso(max_iter = 10000, normalize = True)\n",
        "coefs = []\n",
        "\n",
        "for a in alphas:\n",
        "    lasso.set_params(alpha=a)\n",
        "    lasso.fit(X_train, y_train)\n",
        "    coefs.append(lasso.coef_)\n",
        "    \n",
        "ax = plt.gca()\n",
        "ax.plot(alphas*2, coefs)\n",
        "ax.set_xscale('log')\n",
        "plt.axis('tight')\n",
        "plt.xlabel('alpha')\n",
        "plt.ylabel('weights')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "Yl2UBKnuQ-1c",
        "outputId": "0ee12fa7-33f6-4f7f-a011-32c2639cf5ae"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n",
            "If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n",
            "\n",
            "from sklearn.pipeline import make_pipeline\n",
            "\n",
            "model = make_pipeline(StandardScaler(with_mean=False), Lasso())\n",
            "\n",
            "If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n",
            "\n",
            "kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n",
            "model.fit(X, y, **kwargs)\n",
            "\n",
            "Set parameter alpha to: original_alpha * np.sqrt(n_samples). \n",
            "  FutureWarning,\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n",
            "If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n",
            "\n",
            "from sklearn.pipeline import make_pipeline\n",
            "\n",
            "model = make_pipeline(StandardScaler(with_mean=False), Lasso())\n",
            "\n",
            "If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n",
            "\n",
            "kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n",
            "model.fit(X, y, **kwargs)\n",
            "\n",
            "Set parameter alpha to: original_alpha * np.sqrt(n_samples). \n",
            "  FutureWarning,\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n",
            "If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n",
            "\n",
            "from sklearn.pipeline import make_pipeline\n",
            "\n",
            "model = make_pipeline(StandardScaler(with_mean=False), Lasso())\n",
            "\n",
            "If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n",
            "\n",
            "kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n",
            "model.fit(X, y, **kwargs)\n",
            "\n",
            "Set parameter alpha to: original_alpha * np.sqrt(n_samples). \n",
            "  FutureWarning,\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n",
            "If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n",
            "\n",
            "from sklearn.pipeline import make_pipeline\n",
            "\n",
            "model = make_pipeline(StandardScaler(with_mean=False), Lasso())\n",
            "\n",
            "If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n",
            "\n",
            "kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n",
            "model.fit(X, y, **kwargs)\n",
            "\n",
            "Set parameter alpha to: original_alpha * np.sqrt(n_samples). \n",
            "  FutureWarning,\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n",
            "If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n",
            "\n",
            "from sklearn.pipeline import make_pipeline\n",
            "\n",
            "model = make_pipeline(StandardScaler(with_mean=False), Lasso())\n",
            "\n",
            "If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n",
            "\n",
            "kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n",
            "model.fit(X, y, **kwargs)\n",
            "\n",
            "Set parameter alpha to: original_alpha * np.sqrt(n_samples). \n",
            "  FutureWarning,\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n",
            "If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n",
            "\n",
            "from sklearn.pipeline import make_pipeline\n",
            "\n",
            "model = make_pipeline(StandardScaler(with_mean=False), Lasso())\n",
            "\n",
            "If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n",
            "\n",
            "kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n",
            "model.fit(X, y, **kwargs)\n",
            "\n",
            "Set parameter alpha to: original_alpha * np.sqrt(n_samples). \n",
            "  FutureWarning,\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n",
            "If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n",
            "\n",
            "from sklearn.pipeline import make_pipeline\n",
            "\n",
            "model = make_pipeline(StandardScaler(with_mean=False), Lasso())\n",
            "\n",
            "If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n",
            "\n",
            "kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n",
            "model.fit(X, y, **kwargs)\n",
            "\n",
            "Set parameter alpha to: original_alpha * np.sqrt(n_samples). \n",
            "  FutureWarning,\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n",
            "If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n",
            "\n",
            "from sklearn.pipeline import make_pipeline\n",
            "\n",
            "model = make_pipeline(StandardScaler(with_mean=False), Lasso())\n",
            "\n",
            "If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n",
            "\n",
            "kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n",
            "model.fit(X, y, **kwargs)\n",
            "\n",
            "Set parameter alpha to: original_alpha * np.sqrt(n_samples). \n",
            "  FutureWarning,\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n",
            "If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n",
            "\n",
            "from sklearn.pipeline import make_pipeline\n",
            "\n",
            "model = make_pipeline(StandardScaler(with_mean=False), Lasso())\n",
            "\n",
            "If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n",
            "\n",
            "kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n",
            "model.fit(X, y, **kwargs)\n",
            "\n",
            "Set parameter alpha to: original_alpha * np.sqrt(n_samples). \n",
            "  FutureWarning,\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n",
            "If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n",
            "\n",
            "from sklearn.pipeline import make_pipeline\n",
            "\n",
            "model = make_pipeline(StandardScaler(with_mean=False), Lasso())\n",
            "\n",
            "If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n",
            "\n",
            "kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n",
            "model.fit(X, y, **kwargs)\n",
            "\n",
            "Set parameter alpha to: original_alpha * np.sqrt(n_samples). \n",
            "  FutureWarning,\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n",
            "If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n",
            "\n",
            "from sklearn.pipeline import make_pipeline\n",
            "\n",
            "model = make_pipeline(StandardScaler(with_mean=False), Lasso())\n",
            "\n",
            "If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n",
            "\n",
            "kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n",
            "model.fit(X, y, **kwargs)\n",
            "\n",
            "Set parameter alpha to: original_alpha * np.sqrt(n_samples). \n",
            "  FutureWarning,\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n",
            "If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n",
            "\n",
            "from sklearn.pipeline import make_pipeline\n",
            "\n",
            "model = make_pipeline(StandardScaler(with_mean=False), Lasso())\n",
            "\n",
            "If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n",
            "\n",
            "kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n",
            "model.fit(X, y, **kwargs)\n",
            "\n",
            "Set parameter alpha to: original_alpha * np.sqrt(n_samples). \n",
            "  FutureWarning,\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n",
            "If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n",
            "\n",
            "from sklearn.pipeline import make_pipeline\n",
            "\n",
            "model = make_pipeline(StandardScaler(with_mean=False), Lasso())\n",
            "\n",
            "If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n",
            "\n",
            "kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n",
            "model.fit(X, y, **kwargs)\n",
            "\n",
            "Set parameter alpha to: original_alpha * np.sqrt(n_samples). \n",
            "  FutureWarning,\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n",
            "If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n",
            "\n",
            "from sklearn.pipeline import make_pipeline\n",
            "\n",
            "model = make_pipeline(StandardScaler(with_mean=False), Lasso())\n",
            "\n",
            "If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n",
            "\n",
            "kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n",
            "model.fit(X, y, **kwargs)\n",
            "\n",
            "Set parameter alpha to: original_alpha * np.sqrt(n_samples). \n",
            "  FutureWarning,\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n",
            "If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n",
            "\n",
            "from sklearn.pipeline import make_pipeline\n",
            "\n",
            "model = make_pipeline(StandardScaler(with_mean=False), Lasso())\n",
            "\n",
            "If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n",
            "\n",
            "kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n",
            "model.fit(X, y, **kwargs)\n",
            "\n",
            "Set parameter alpha to: original_alpha * np.sqrt(n_samples). \n",
            "  FutureWarning,\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n",
            "If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n",
            "\n",
            "from sklearn.pipeline import make_pipeline\n",
            "\n",
            "model = make_pipeline(StandardScaler(with_mean=False), Lasso())\n",
            "\n",
            "If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n",
            "\n",
            "kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n",
            "model.fit(X, y, **kwargs)\n",
            "\n",
            "Set parameter alpha to: original_alpha * np.sqrt(n_samples). \n",
            "  FutureWarning,\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n",
            "If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n",
            "\n",
            "from sklearn.pipeline import make_pipeline\n",
            "\n",
            "model = make_pipeline(StandardScaler(with_mean=False), Lasso())\n",
            "\n",
            "If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n",
            "\n",
            "kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n",
            "model.fit(X, y, **kwargs)\n",
            "\n",
            "Set parameter alpha to: original_alpha * np.sqrt(n_samples). \n",
            "  FutureWarning,\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n",
            "If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n",
            "\n",
            "from sklearn.pipeline import make_pipeline\n",
            "\n",
            "model = make_pipeline(StandardScaler(with_mean=False), Lasso())\n",
            "\n",
            "If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n",
            "\n",
            "kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n",
            "model.fit(X, y, **kwargs)\n",
            "\n",
            "Set parameter alpha to: original_alpha * np.sqrt(n_samples). \n",
            "  FutureWarning,\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n",
            "If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n",
            "\n",
            "from sklearn.pipeline import make_pipeline\n",
            "\n",
            "model = make_pipeline(StandardScaler(with_mean=False), Lasso())\n",
            "\n",
            "If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n",
            "\n",
            "kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n",
            "model.fit(X, y, **kwargs)\n",
            "\n",
            "Set parameter alpha to: original_alpha * np.sqrt(n_samples). \n",
            "  FutureWarning,\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n",
            "If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n",
            "\n",
            "from sklearn.pipeline import make_pipeline\n",
            "\n",
            "model = make_pipeline(StandardScaler(with_mean=False), Lasso())\n",
            "\n",
            "If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n",
            "\n",
            "kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n",
            "model.fit(X, y, **kwargs)\n",
            "\n",
            "Set parameter alpha to: original_alpha * np.sqrt(n_samples). \n",
            "  FutureWarning,\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n",
            "If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n",
            "\n",
            "from sklearn.pipeline import make_pipeline\n",
            "\n",
            "model = make_pipeline(StandardScaler(with_mean=False), Lasso())\n",
            "\n",
            "If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n",
            "\n",
            "kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n",
            "model.fit(X, y, **kwargs)\n",
            "\n",
            "Set parameter alpha to: original_alpha * np.sqrt(n_samples). \n",
            "  FutureWarning,\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n",
            "If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n",
            "\n",
            "from sklearn.pipeline import make_pipeline\n",
            "\n",
            "model = make_pipeline(StandardScaler(with_mean=False), Lasso())\n",
            "\n",
            "If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n",
            "\n",
            "kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n",
            "model.fit(X, y, **kwargs)\n",
            "\n",
            "Set parameter alpha to: original_alpha * np.sqrt(n_samples). \n",
            "  FutureWarning,\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n",
            "If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n",
            "\n",
            "from sklearn.pipeline import make_pipeline\n",
            "\n",
            "model = make_pipeline(StandardScaler(with_mean=False), Lasso())\n",
            "\n",
            "If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n",
            "\n",
            "kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n",
            "model.fit(X, y, **kwargs)\n",
            "\n",
            "Set parameter alpha to: original_alpha * np.sqrt(n_samples). \n",
            "  FutureWarning,\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n",
            "If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n",
            "\n",
            "from sklearn.pipeline import make_pipeline\n",
            "\n",
            "model = make_pipeline(StandardScaler(with_mean=False), Lasso())\n",
            "\n",
            "If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n",
            "\n",
            "kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n",
            "model.fit(X, y, **kwargs)\n",
            "\n",
            "Set parameter alpha to: original_alpha * np.sqrt(n_samples). \n",
            "  FutureWarning,\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n",
            "If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n",
            "\n",
            "from sklearn.pipeline import make_pipeline\n",
            "\n",
            "model = make_pipeline(StandardScaler(with_mean=False), Lasso())\n",
            "\n",
            "If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n",
            "\n",
            "kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n",
            "model.fit(X, y, **kwargs)\n",
            "\n",
            "Set parameter alpha to: original_alpha * np.sqrt(n_samples). \n",
            "  FutureWarning,\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n",
            "If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n",
            "\n",
            "from sklearn.pipeline import make_pipeline\n",
            "\n",
            "model = make_pipeline(StandardScaler(with_mean=False), Lasso())\n",
            "\n",
            "If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n",
            "\n",
            "kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n",
            "model.fit(X, y, **kwargs)\n",
            "\n",
            "Set parameter alpha to: original_alpha * np.sqrt(n_samples). \n",
            "  FutureWarning,\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n",
            "If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n",
            "\n",
            "from sklearn.pipeline import make_pipeline\n",
            "\n",
            "model = make_pipeline(StandardScaler(with_mean=False), Lasso())\n",
            "\n",
            "If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n",
            "\n",
            "kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n",
            "model.fit(X, y, **kwargs)\n",
            "\n",
            "Set parameter alpha to: original_alpha * np.sqrt(n_samples). \n",
            "  FutureWarning,\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n",
            "If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n",
            "\n",
            "from sklearn.pipeline import make_pipeline\n",
            "\n",
            "model = make_pipeline(StandardScaler(with_mean=False), Lasso())\n",
            "\n",
            "If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n",
            "\n",
            "kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n",
            "model.fit(X, y, **kwargs)\n",
            "\n",
            "Set parameter alpha to: original_alpha * np.sqrt(n_samples). \n",
            "  FutureWarning,\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n",
            "If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n",
            "\n",
            "from sklearn.pipeline import make_pipeline\n",
            "\n",
            "model = make_pipeline(StandardScaler(with_mean=False), Lasso())\n",
            "\n",
            "If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n",
            "\n",
            "kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n",
            "model.fit(X, y, **kwargs)\n",
            "\n",
            "Set parameter alpha to: original_alpha * np.sqrt(n_samples). \n",
            "  FutureWarning,\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n",
            "If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n",
            "\n",
            "from sklearn.pipeline import make_pipeline\n",
            "\n",
            "model = make_pipeline(StandardScaler(with_mean=False), Lasso())\n",
            "\n",
            "If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n",
            "\n",
            "kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n",
            "model.fit(X, y, **kwargs)\n",
            "\n",
            "Set parameter alpha to: original_alpha * np.sqrt(n_samples). \n",
            "  FutureWarning,\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n",
            "If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n",
            "\n",
            "from sklearn.pipeline import make_pipeline\n",
            "\n",
            "model = make_pipeline(StandardScaler(with_mean=False), Lasso())\n",
            "\n",
            "If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n",
            "\n",
            "kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n",
            "model.fit(X, y, **kwargs)\n",
            "\n",
            "Set parameter alpha to: original_alpha * np.sqrt(n_samples). \n",
            "  FutureWarning,\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n",
            "If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n",
            "\n",
            "from sklearn.pipeline import make_pipeline\n",
            "\n",
            "model = make_pipeline(StandardScaler(with_mean=False), Lasso())\n",
            "\n",
            "If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n",
            "\n",
            "kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n",
            "model.fit(X, y, **kwargs)\n",
            "\n",
            "Set parameter alpha to: original_alpha * np.sqrt(n_samples). \n",
            "  FutureWarning,\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n",
            "If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n",
            "\n",
            "from sklearn.pipeline import make_pipeline\n",
            "\n",
            "model = make_pipeline(StandardScaler(with_mean=False), Lasso())\n",
            "\n",
            "If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n",
            "\n",
            "kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n",
            "model.fit(X, y, **kwargs)\n",
            "\n",
            "Set parameter alpha to: original_alpha * np.sqrt(n_samples). \n",
            "  FutureWarning,\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n",
            "If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n",
            "\n",
            "from sklearn.pipeline import make_pipeline\n",
            "\n",
            "model = make_pipeline(StandardScaler(with_mean=False), Lasso())\n",
            "\n",
            "If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n",
            "\n",
            "kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n",
            "model.fit(X, y, **kwargs)\n",
            "\n",
            "Set parameter alpha to: original_alpha * np.sqrt(n_samples). \n",
            "  FutureWarning,\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n",
            "If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n",
            "\n",
            "from sklearn.pipeline import make_pipeline\n",
            "\n",
            "model = make_pipeline(StandardScaler(with_mean=False), Lasso())\n",
            "\n",
            "If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n",
            "\n",
            "kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n",
            "model.fit(X, y, **kwargs)\n",
            "\n",
            "Set parameter alpha to: original_alpha * np.sqrt(n_samples). \n",
            "  FutureWarning,\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n",
            "If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n",
            "\n",
            "from sklearn.pipeline import make_pipeline\n",
            "\n",
            "model = make_pipeline(StandardScaler(with_mean=False), Lasso())\n",
            "\n",
            "If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n",
            "\n",
            "kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n",
            "model.fit(X, y, **kwargs)\n",
            "\n",
            "Set parameter alpha to: original_alpha * np.sqrt(n_samples). \n",
            "  FutureWarning,\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n",
            "If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n",
            "\n",
            "from sklearn.pipeline import make_pipeline\n",
            "\n",
            "model = make_pipeline(StandardScaler(with_mean=False), Lasso())\n",
            "\n",
            "If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n",
            "\n",
            "kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n",
            "model.fit(X, y, **kwargs)\n",
            "\n",
            "Set parameter alpha to: original_alpha * np.sqrt(n_samples). \n",
            "  FutureWarning,\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n",
            "If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n",
            "\n",
            "from sklearn.pipeline import make_pipeline\n",
            "\n",
            "model = make_pipeline(StandardScaler(with_mean=False), Lasso())\n",
            "\n",
            "If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n",
            "\n",
            "kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n",
            "model.fit(X, y, **kwargs)\n",
            "\n",
            "Set parameter alpha to: original_alpha * np.sqrt(n_samples). \n",
            "  FutureWarning,\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n",
            "If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n",
            "\n",
            "from sklearn.pipeline import make_pipeline\n",
            "\n",
            "model = make_pipeline(StandardScaler(with_mean=False), Lasso())\n",
            "\n",
            "If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n",
            "\n",
            "kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n",
            "model.fit(X, y, **kwargs)\n",
            "\n",
            "Set parameter alpha to: original_alpha * np.sqrt(n_samples). \n",
            "  FutureWarning,\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n",
            "If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n",
            "\n",
            "from sklearn.pipeline import make_pipeline\n",
            "\n",
            "model = make_pipeline(StandardScaler(with_mean=False), Lasso())\n",
            "\n",
            "If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n",
            "\n",
            "kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n",
            "model.fit(X, y, **kwargs)\n",
            "\n",
            "Set parameter alpha to: original_alpha * np.sqrt(n_samples). \n",
            "  FutureWarning,\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n",
            "If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n",
            "\n",
            "from sklearn.pipeline import make_pipeline\n",
            "\n",
            "model = make_pipeline(StandardScaler(with_mean=False), Lasso())\n",
            "\n",
            "If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n",
            "\n",
            "kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n",
            "model.fit(X, y, **kwargs)\n",
            "\n",
            "Set parameter alpha to: original_alpha * np.sqrt(n_samples). \n",
            "  FutureWarning,\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n",
            "If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n",
            "\n",
            "from sklearn.pipeline import make_pipeline\n",
            "\n",
            "model = make_pipeline(StandardScaler(with_mean=False), Lasso())\n",
            "\n",
            "If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n",
            "\n",
            "kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n",
            "model.fit(X, y, **kwargs)\n",
            "\n",
            "Set parameter alpha to: original_alpha * np.sqrt(n_samples). \n",
            "  FutureWarning,\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n",
            "If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n",
            "\n",
            "from sklearn.pipeline import make_pipeline\n",
            "\n",
            "model = make_pipeline(StandardScaler(with_mean=False), Lasso())\n",
            "\n",
            "If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n",
            "\n",
            "kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n",
            "model.fit(X, y, **kwargs)\n",
            "\n",
            "Set parameter alpha to: original_alpha * np.sqrt(n_samples). \n",
            "  FutureWarning,\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n",
            "If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n",
            "\n",
            "from sklearn.pipeline import make_pipeline\n",
            "\n",
            "model = make_pipeline(StandardScaler(with_mean=False), Lasso())\n",
            "\n",
            "If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n",
            "\n",
            "kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n",
            "model.fit(X, y, **kwargs)\n",
            "\n",
            "Set parameter alpha to: original_alpha * np.sqrt(n_samples). \n",
            "  FutureWarning,\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n",
            "If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n",
            "\n",
            "from sklearn.pipeline import make_pipeline\n",
            "\n",
            "model = make_pipeline(StandardScaler(with_mean=False), Lasso())\n",
            "\n",
            "If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n",
            "\n",
            "kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n",
            "model.fit(X, y, **kwargs)\n",
            "\n",
            "Set parameter alpha to: original_alpha * np.sqrt(n_samples). \n",
            "  FutureWarning,\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n",
            "If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n",
            "\n",
            "from sklearn.pipeline import make_pipeline\n",
            "\n",
            "model = make_pipeline(StandardScaler(with_mean=False), Lasso())\n",
            "\n",
            "If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n",
            "\n",
            "kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n",
            "model.fit(X, y, **kwargs)\n",
            "\n",
            "Set parameter alpha to: original_alpha * np.sqrt(n_samples). \n",
            "  FutureWarning,\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n",
            "If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n",
            "\n",
            "from sklearn.pipeline import make_pipeline\n",
            "\n",
            "model = make_pipeline(StandardScaler(with_mean=False), Lasso())\n",
            "\n",
            "If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n",
            "\n",
            "kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n",
            "model.fit(X, y, **kwargs)\n",
            "\n",
            "Set parameter alpha to: original_alpha * np.sqrt(n_samples). \n",
            "  FutureWarning,\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n",
            "If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n",
            "\n",
            "from sklearn.pipeline import make_pipeline\n",
            "\n",
            "model = make_pipeline(StandardScaler(with_mean=False), Lasso())\n",
            "\n",
            "If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n",
            "\n",
            "kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n",
            "model.fit(X, y, **kwargs)\n",
            "\n",
            "Set parameter alpha to: original_alpha * np.sqrt(n_samples). \n",
            "  FutureWarning,\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n",
            "If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n",
            "\n",
            "from sklearn.pipeline import make_pipeline\n",
            "\n",
            "model = make_pipeline(StandardScaler(with_mean=False), Lasso())\n",
            "\n",
            "If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n",
            "\n",
            "kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n",
            "model.fit(X, y, **kwargs)\n",
            "\n",
            "Set parameter alpha to: original_alpha * np.sqrt(n_samples). \n",
            "  FutureWarning,\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n",
            "If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n",
            "\n",
            "from sklearn.pipeline import make_pipeline\n",
            "\n",
            "model = make_pipeline(StandardScaler(with_mean=False), Lasso())\n",
            "\n",
            "If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n",
            "\n",
            "kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n",
            "model.fit(X, y, **kwargs)\n",
            "\n",
            "Set parameter alpha to: original_alpha * np.sqrt(n_samples). \n",
            "  FutureWarning,\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n",
            "If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n",
            "\n",
            "from sklearn.pipeline import make_pipeline\n",
            "\n",
            "model = make_pipeline(StandardScaler(with_mean=False), Lasso())\n",
            "\n",
            "If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n",
            "\n",
            "kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n",
            "model.fit(X, y, **kwargs)\n",
            "\n",
            "Set parameter alpha to: original_alpha * np.sqrt(n_samples). \n",
            "  FutureWarning,\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n",
            "If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n",
            "\n",
            "from sklearn.pipeline import make_pipeline\n",
            "\n",
            "model = make_pipeline(StandardScaler(with_mean=False), Lasso())\n",
            "\n",
            "If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n",
            "\n",
            "kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n",
            "model.fit(X, y, **kwargs)\n",
            "\n",
            "Set parameter alpha to: original_alpha * np.sqrt(n_samples). \n",
            "  FutureWarning,\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n",
            "If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n",
            "\n",
            "from sklearn.pipeline import make_pipeline\n",
            "\n",
            "model = make_pipeline(StandardScaler(with_mean=False), Lasso())\n",
            "\n",
            "If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n",
            "\n",
            "kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n",
            "model.fit(X, y, **kwargs)\n",
            "\n",
            "Set parameter alpha to: original_alpha * np.sqrt(n_samples). \n",
            "  FutureWarning,\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n",
            "If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n",
            "\n",
            "from sklearn.pipeline import make_pipeline\n",
            "\n",
            "model = make_pipeline(StandardScaler(with_mean=False), Lasso())\n",
            "\n",
            "If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n",
            "\n",
            "kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n",
            "model.fit(X, y, **kwargs)\n",
            "\n",
            "Set parameter alpha to: original_alpha * np.sqrt(n_samples). \n",
            "  FutureWarning,\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n",
            "If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n",
            "\n",
            "from sklearn.pipeline import make_pipeline\n",
            "\n",
            "model = make_pipeline(StandardScaler(with_mean=False), Lasso())\n",
            "\n",
            "If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n",
            "\n",
            "kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n",
            "model.fit(X, y, **kwargs)\n",
            "\n",
            "Set parameter alpha to: original_alpha * np.sqrt(n_samples). \n",
            "  FutureWarning,\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n",
            "If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n",
            "\n",
            "from sklearn.pipeline import make_pipeline\n",
            "\n",
            "model = make_pipeline(StandardScaler(with_mean=False), Lasso())\n",
            "\n",
            "If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n",
            "\n",
            "kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n",
            "model.fit(X, y, **kwargs)\n",
            "\n",
            "Set parameter alpha to: original_alpha * np.sqrt(n_samples). \n",
            "  FutureWarning,\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n",
            "If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n",
            "\n",
            "from sklearn.pipeline import make_pipeline\n",
            "\n",
            "model = make_pipeline(StandardScaler(with_mean=False), Lasso())\n",
            "\n",
            "If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n",
            "\n",
            "kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n",
            "model.fit(X, y, **kwargs)\n",
            "\n",
            "Set parameter alpha to: original_alpha * np.sqrt(n_samples). \n",
            "  FutureWarning,\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n",
            "If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n",
            "\n",
            "from sklearn.pipeline import make_pipeline\n",
            "\n",
            "model = make_pipeline(StandardScaler(with_mean=False), Lasso())\n",
            "\n",
            "If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n",
            "\n",
            "kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n",
            "model.fit(X, y, **kwargs)\n",
            "\n",
            "Set parameter alpha to: original_alpha * np.sqrt(n_samples). \n",
            "  FutureWarning,\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n",
            "If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n",
            "\n",
            "from sklearn.pipeline import make_pipeline\n",
            "\n",
            "model = make_pipeline(StandardScaler(with_mean=False), Lasso())\n",
            "\n",
            "If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n",
            "\n",
            "kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n",
            "model.fit(X, y, **kwargs)\n",
            "\n",
            "Set parameter alpha to: original_alpha * np.sqrt(n_samples). \n",
            "  FutureWarning,\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n",
            "If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n",
            "\n",
            "from sklearn.pipeline import make_pipeline\n",
            "\n",
            "model = make_pipeline(StandardScaler(with_mean=False), Lasso())\n",
            "\n",
            "If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n",
            "\n",
            "kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n",
            "model.fit(X, y, **kwargs)\n",
            "\n",
            "Set parameter alpha to: original_alpha * np.sqrt(n_samples). \n",
            "  FutureWarning,\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n",
            "If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n",
            "\n",
            "from sklearn.pipeline import make_pipeline\n",
            "\n",
            "model = make_pipeline(StandardScaler(with_mean=False), Lasso())\n",
            "\n",
            "If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n",
            "\n",
            "kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n",
            "model.fit(X, y, **kwargs)\n",
            "\n",
            "Set parameter alpha to: original_alpha * np.sqrt(n_samples). \n",
            "  FutureWarning,\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n",
            "If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n",
            "\n",
            "from sklearn.pipeline import make_pipeline\n",
            "\n",
            "model = make_pipeline(StandardScaler(with_mean=False), Lasso())\n",
            "\n",
            "If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n",
            "\n",
            "kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n",
            "model.fit(X, y, **kwargs)\n",
            "\n",
            "Set parameter alpha to: original_alpha * np.sqrt(n_samples). \n",
            "  FutureWarning,\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n",
            "If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n",
            "\n",
            "from sklearn.pipeline import make_pipeline\n",
            "\n",
            "model = make_pipeline(StandardScaler(with_mean=False), Lasso())\n",
            "\n",
            "If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n",
            "\n",
            "kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n",
            "model.fit(X, y, **kwargs)\n",
            "\n",
            "Set parameter alpha to: original_alpha * np.sqrt(n_samples). \n",
            "  FutureWarning,\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n",
            "If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n",
            "\n",
            "from sklearn.pipeline import make_pipeline\n",
            "\n",
            "model = make_pipeline(StandardScaler(with_mean=False), Lasso())\n",
            "\n",
            "If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n",
            "\n",
            "kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n",
            "model.fit(X, y, **kwargs)\n",
            "\n",
            "Set parameter alpha to: original_alpha * np.sqrt(n_samples). \n",
            "  FutureWarning,\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n",
            "If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n",
            "\n",
            "from sklearn.pipeline import make_pipeline\n",
            "\n",
            "model = make_pipeline(StandardScaler(with_mean=False), Lasso())\n",
            "\n",
            "If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n",
            "\n",
            "kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n",
            "model.fit(X, y, **kwargs)\n",
            "\n",
            "Set parameter alpha to: original_alpha * np.sqrt(n_samples). \n",
            "  FutureWarning,\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n",
            "If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n",
            "\n",
            "from sklearn.pipeline import make_pipeline\n",
            "\n",
            "model = make_pipeline(StandardScaler(with_mean=False), Lasso())\n",
            "\n",
            "If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n",
            "\n",
            "kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n",
            "model.fit(X, y, **kwargs)\n",
            "\n",
            "Set parameter alpha to: original_alpha * np.sqrt(n_samples). \n",
            "  FutureWarning,\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n",
            "If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n",
            "\n",
            "from sklearn.pipeline import make_pipeline\n",
            "\n",
            "model = make_pipeline(StandardScaler(with_mean=False), Lasso())\n",
            "\n",
            "If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n",
            "\n",
            "kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n",
            "model.fit(X, y, **kwargs)\n",
            "\n",
            "Set parameter alpha to: original_alpha * np.sqrt(n_samples). \n",
            "  FutureWarning,\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n",
            "If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n",
            "\n",
            "from sklearn.pipeline import make_pipeline\n",
            "\n",
            "model = make_pipeline(StandardScaler(with_mean=False), Lasso())\n",
            "\n",
            "If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n",
            "\n",
            "kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n",
            "model.fit(X, y, **kwargs)\n",
            "\n",
            "Set parameter alpha to: original_alpha * np.sqrt(n_samples). \n",
            "  FutureWarning,\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n",
            "If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n",
            "\n",
            "from sklearn.pipeline import make_pipeline\n",
            "\n",
            "model = make_pipeline(StandardScaler(with_mean=False), Lasso())\n",
            "\n",
            "If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n",
            "\n",
            "kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n",
            "model.fit(X, y, **kwargs)\n",
            "\n",
            "Set parameter alpha to: original_alpha * np.sqrt(n_samples). \n",
            "  FutureWarning,\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n",
            "If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n",
            "\n",
            "from sklearn.pipeline import make_pipeline\n",
            "\n",
            "model = make_pipeline(StandardScaler(with_mean=False), Lasso())\n",
            "\n",
            "If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n",
            "\n",
            "kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n",
            "model.fit(X, y, **kwargs)\n",
            "\n",
            "Set parameter alpha to: original_alpha * np.sqrt(n_samples). \n",
            "  FutureWarning,\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n",
            "If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n",
            "\n",
            "from sklearn.pipeline import make_pipeline\n",
            "\n",
            "model = make_pipeline(StandardScaler(with_mean=False), Lasso())\n",
            "\n",
            "If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n",
            "\n",
            "kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n",
            "model.fit(X, y, **kwargs)\n",
            "\n",
            "Set parameter alpha to: original_alpha * np.sqrt(n_samples). \n",
            "  FutureWarning,\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n",
            "If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n",
            "\n",
            "from sklearn.pipeline import make_pipeline\n",
            "\n",
            "model = make_pipeline(StandardScaler(with_mean=False), Lasso())\n",
            "\n",
            "If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n",
            "\n",
            "kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n",
            "model.fit(X, y, **kwargs)\n",
            "\n",
            "Set parameter alpha to: original_alpha * np.sqrt(n_samples). \n",
            "  FutureWarning,\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n",
            "If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n",
            "\n",
            "from sklearn.pipeline import make_pipeline\n",
            "\n",
            "model = make_pipeline(StandardScaler(with_mean=False), Lasso())\n",
            "\n",
            "If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n",
            "\n",
            "kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n",
            "model.fit(X, y, **kwargs)\n",
            "\n",
            "Set parameter alpha to: original_alpha * np.sqrt(n_samples). \n",
            "  FutureWarning,\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n",
            "If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n",
            "\n",
            "from sklearn.pipeline import make_pipeline\n",
            "\n",
            "model = make_pipeline(StandardScaler(with_mean=False), Lasso())\n",
            "\n",
            "If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n",
            "\n",
            "kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n",
            "model.fit(X, y, **kwargs)\n",
            "\n",
            "Set parameter alpha to: original_alpha * np.sqrt(n_samples). \n",
            "  FutureWarning,\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n",
            "If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n",
            "\n",
            "from sklearn.pipeline import make_pipeline\n",
            "\n",
            "model = make_pipeline(StandardScaler(with_mean=False), Lasso())\n",
            "\n",
            "If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n",
            "\n",
            "kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n",
            "model.fit(X, y, **kwargs)\n",
            "\n",
            "Set parameter alpha to: original_alpha * np.sqrt(n_samples). \n",
            "  FutureWarning,\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n",
            "If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n",
            "\n",
            "from sklearn.pipeline import make_pipeline\n",
            "\n",
            "model = make_pipeline(StandardScaler(with_mean=False), Lasso())\n",
            "\n",
            "If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n",
            "\n",
            "kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n",
            "model.fit(X, y, **kwargs)\n",
            "\n",
            "Set parameter alpha to: original_alpha * np.sqrt(n_samples). \n",
            "  FutureWarning,\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n",
            "If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n",
            "\n",
            "from sklearn.pipeline import make_pipeline\n",
            "\n",
            "model = make_pipeline(StandardScaler(with_mean=False), Lasso())\n",
            "\n",
            "If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n",
            "\n",
            "kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n",
            "model.fit(X, y, **kwargs)\n",
            "\n",
            "Set parameter alpha to: original_alpha * np.sqrt(n_samples). \n",
            "  FutureWarning,\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n",
            "If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n",
            "\n",
            "from sklearn.pipeline import make_pipeline\n",
            "\n",
            "model = make_pipeline(StandardScaler(with_mean=False), Lasso())\n",
            "\n",
            "If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n",
            "\n",
            "kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n",
            "model.fit(X, y, **kwargs)\n",
            "\n",
            "Set parameter alpha to: original_alpha * np.sqrt(n_samples). \n",
            "  FutureWarning,\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n",
            "If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n",
            "\n",
            "from sklearn.pipeline import make_pipeline\n",
            "\n",
            "model = make_pipeline(StandardScaler(with_mean=False), Lasso())\n",
            "\n",
            "If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n",
            "\n",
            "kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n",
            "model.fit(X, y, **kwargs)\n",
            "\n",
            "Set parameter alpha to: original_alpha * np.sqrt(n_samples). \n",
            "  FutureWarning,\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n",
            "If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n",
            "\n",
            "from sklearn.pipeline import make_pipeline\n",
            "\n",
            "model = make_pipeline(StandardScaler(with_mean=False), Lasso())\n",
            "\n",
            "If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n",
            "\n",
            "kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n",
            "model.fit(X, y, **kwargs)\n",
            "\n",
            "Set parameter alpha to: original_alpha * np.sqrt(n_samples). \n",
            "  FutureWarning,\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n",
            "If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n",
            "\n",
            "from sklearn.pipeline import make_pipeline\n",
            "\n",
            "model = make_pipeline(StandardScaler(with_mean=False), Lasso())\n",
            "\n",
            "If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n",
            "\n",
            "kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n",
            "model.fit(X, y, **kwargs)\n",
            "\n",
            "Set parameter alpha to: original_alpha * np.sqrt(n_samples). \n",
            "  FutureWarning,\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n",
            "If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n",
            "\n",
            "from sklearn.pipeline import make_pipeline\n",
            "\n",
            "model = make_pipeline(StandardScaler(with_mean=False), Lasso())\n",
            "\n",
            "If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n",
            "\n",
            "kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n",
            "model.fit(X, y, **kwargs)\n",
            "\n",
            "Set parameter alpha to: original_alpha * np.sqrt(n_samples). \n",
            "  FutureWarning,\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n",
            "If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n",
            "\n",
            "from sklearn.pipeline import make_pipeline\n",
            "\n",
            "model = make_pipeline(StandardScaler(with_mean=False), Lasso())\n",
            "\n",
            "If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n",
            "\n",
            "kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n",
            "model.fit(X, y, **kwargs)\n",
            "\n",
            "Set parameter alpha to: original_alpha * np.sqrt(n_samples). \n",
            "  FutureWarning,\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n",
            "If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n",
            "\n",
            "from sklearn.pipeline import make_pipeline\n",
            "\n",
            "model = make_pipeline(StandardScaler(with_mean=False), Lasso())\n",
            "\n",
            "If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n",
            "\n",
            "kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n",
            "model.fit(X, y, **kwargs)\n",
            "\n",
            "Set parameter alpha to: original_alpha * np.sqrt(n_samples). \n",
            "  FutureWarning,\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n",
            "If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n",
            "\n",
            "from sklearn.pipeline import make_pipeline\n",
            "\n",
            "model = make_pipeline(StandardScaler(with_mean=False), Lasso())\n",
            "\n",
            "If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n",
            "\n",
            "kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n",
            "model.fit(X, y, **kwargs)\n",
            "\n",
            "Set parameter alpha to: original_alpha * np.sqrt(n_samples). \n",
            "  FutureWarning,\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n",
            "If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n",
            "\n",
            "from sklearn.pipeline import make_pipeline\n",
            "\n",
            "model = make_pipeline(StandardScaler(with_mean=False), Lasso())\n",
            "\n",
            "If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n",
            "\n",
            "kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n",
            "model.fit(X, y, **kwargs)\n",
            "\n",
            "Set parameter alpha to: original_alpha * np.sqrt(n_samples). \n",
            "  FutureWarning,\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n",
            "If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n",
            "\n",
            "from sklearn.pipeline import make_pipeline\n",
            "\n",
            "model = make_pipeline(StandardScaler(with_mean=False), Lasso())\n",
            "\n",
            "If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n",
            "\n",
            "kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n",
            "model.fit(X, y, **kwargs)\n",
            "\n",
            "Set parameter alpha to: original_alpha * np.sqrt(n_samples). \n",
            "  FutureWarning,\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n",
            "If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n",
            "\n",
            "from sklearn.pipeline import make_pipeline\n",
            "\n",
            "model = make_pipeline(StandardScaler(with_mean=False), Lasso())\n",
            "\n",
            "If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n",
            "\n",
            "kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n",
            "model.fit(X, y, **kwargs)\n",
            "\n",
            "Set parameter alpha to: original_alpha * np.sqrt(n_samples). \n",
            "  FutureWarning,\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n",
            "If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n",
            "\n",
            "from sklearn.pipeline import make_pipeline\n",
            "\n",
            "model = make_pipeline(StandardScaler(with_mean=False), Lasso())\n",
            "\n",
            "If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n",
            "\n",
            "kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n",
            "model.fit(X, y, **kwargs)\n",
            "\n",
            "Set parameter alpha to: original_alpha * np.sqrt(n_samples). \n",
            "  FutureWarning,\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n",
            "If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n",
            "\n",
            "from sklearn.pipeline import make_pipeline\n",
            "\n",
            "model = make_pipeline(StandardScaler(with_mean=False), Lasso())\n",
            "\n",
            "If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n",
            "\n",
            "kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n",
            "model.fit(X, y, **kwargs)\n",
            "\n",
            "Set parameter alpha to: original_alpha * np.sqrt(n_samples). \n",
            "  FutureWarning,\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n",
            "If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n",
            "\n",
            "from sklearn.pipeline import make_pipeline\n",
            "\n",
            "model = make_pipeline(StandardScaler(with_mean=False), Lasso())\n",
            "\n",
            "If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n",
            "\n",
            "kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n",
            "model.fit(X, y, **kwargs)\n",
            "\n",
            "Set parameter alpha to: original_alpha * np.sqrt(n_samples). \n",
            "  FutureWarning,\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n",
            "If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n",
            "\n",
            "from sklearn.pipeline import make_pipeline\n",
            "\n",
            "model = make_pipeline(StandardScaler(with_mean=False), Lasso())\n",
            "\n",
            "If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n",
            "\n",
            "kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n",
            "model.fit(X, y, **kwargs)\n",
            "\n",
            "Set parameter alpha to: original_alpha * np.sqrt(n_samples). \n",
            "  FutureWarning,\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n",
            "If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n",
            "\n",
            "from sklearn.pipeline import make_pipeline\n",
            "\n",
            "model = make_pipeline(StandardScaler(with_mean=False), Lasso())\n",
            "\n",
            "If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n",
            "\n",
            "kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n",
            "model.fit(X, y, **kwargs)\n",
            "\n",
            "Set parameter alpha to: original_alpha * np.sqrt(n_samples). \n",
            "  FutureWarning,\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n",
            "If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n",
            "\n",
            "from sklearn.pipeline import make_pipeline\n",
            "\n",
            "model = make_pipeline(StandardScaler(with_mean=False), Lasso())\n",
            "\n",
            "If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n",
            "\n",
            "kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n",
            "model.fit(X, y, **kwargs)\n",
            "\n",
            "Set parameter alpha to: original_alpha * np.sqrt(n_samples). \n",
            "  FutureWarning,\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n",
            "If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n",
            "\n",
            "from sklearn.pipeline import make_pipeline\n",
            "\n",
            "model = make_pipeline(StandardScaler(with_mean=False), Lasso())\n",
            "\n",
            "If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n",
            "\n",
            "kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n",
            "model.fit(X, y, **kwargs)\n",
            "\n",
            "Set parameter alpha to: original_alpha * np.sqrt(n_samples). \n",
            "  FutureWarning,\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n",
            "If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n",
            "\n",
            "from sklearn.pipeline import make_pipeline\n",
            "\n",
            "model = make_pipeline(StandardScaler(with_mean=False), Lasso())\n",
            "\n",
            "If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n",
            "\n",
            "kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n",
            "model.fit(X, y, **kwargs)\n",
            "\n",
            "Set parameter alpha to: original_alpha * np.sqrt(n_samples). \n",
            "  FutureWarning,\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n",
            "If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n",
            "\n",
            "from sklearn.pipeline import make_pipeline\n",
            "\n",
            "model = make_pipeline(StandardScaler(with_mean=False), Lasso())\n",
            "\n",
            "If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n",
            "\n",
            "kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n",
            "model.fit(X, y, **kwargs)\n",
            "\n",
            "Set parameter alpha to: original_alpha * np.sqrt(n_samples). \n",
            "  FutureWarning,\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n",
            "If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n",
            "\n",
            "from sklearn.pipeline import make_pipeline\n",
            "\n",
            "model = make_pipeline(StandardScaler(with_mean=False), Lasso())\n",
            "\n",
            "If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n",
            "\n",
            "kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n",
            "model.fit(X, y, **kwargs)\n",
            "\n",
            "Set parameter alpha to: original_alpha * np.sqrt(n_samples). \n",
            "  FutureWarning,\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n",
            "If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n",
            "\n",
            "from sklearn.pipeline import make_pipeline\n",
            "\n",
            "model = make_pipeline(StandardScaler(with_mean=False), Lasso())\n",
            "\n",
            "If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n",
            "\n",
            "kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n",
            "model.fit(X, y, **kwargs)\n",
            "\n",
            "Set parameter alpha to: original_alpha * np.sqrt(n_samples). \n",
            "  FutureWarning,\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n",
            "If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n",
            "\n",
            "from sklearn.pipeline import make_pipeline\n",
            "\n",
            "model = make_pipeline(StandardScaler(with_mean=False), Lasso())\n",
            "\n",
            "If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n",
            "\n",
            "kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n",
            "model.fit(X, y, **kwargs)\n",
            "\n",
            "Set parameter alpha to: original_alpha * np.sqrt(n_samples). \n",
            "  FutureWarning,\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0, 0.5, 'weights')"
            ]
          },
          "metadata": {},
          "execution_count": 162
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "lassocv = LassoCV(alphas = None, cv = 10, max_iter = 100000, normalize = True)\n",
        "lassocv.fit(X_train, y_train)\n",
        "\n",
        "lasso.set_params(alpha=lassocv.alpha_)\n",
        "lasso.fit(X_train, y_train)\n",
        "mean_squared_error(y_test, lasso.predict(X_test))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7wvyXXchTFh7",
        "outputId": "5c7d2720-7136-492d-dc64-be061b26cb30"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n",
            "If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n",
            "\n",
            "from sklearn.pipeline import make_pipeline\n",
            "\n",
            "model = make_pipeline(StandardScaler(with_mean=False), Lasso())\n",
            "\n",
            "If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n",
            "\n",
            "kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n",
            "model.fit(X, y, **kwargs)\n",
            "\n",
            "Set parameter alpha to: original_alpha * np.sqrt(n_samples). \n",
            "  FutureWarning,\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_base.py:145: FutureWarning: 'normalize' was deprecated in version 1.0 and will be removed in 1.2.\n",
            "If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:\n",
            "\n",
            "from sklearn.pipeline import make_pipeline\n",
            "\n",
            "model = make_pipeline(StandardScaler(with_mean=False), Lasso())\n",
            "\n",
            "If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:\n",
            "\n",
            "kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}\n",
            "model.fit(X, y, **kwargs)\n",
            "\n",
            "Set parameter alpha to: original_alpha * np.sqrt(n_samples). \n",
            "  FutureWarning,\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "25.439887927196114"
            ]
          },
          "metadata": {},
          "execution_count": 163
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pd.Series(lasso.coef_, index=X.columns)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "X3qY2G2QTMoG",
        "outputId": "22de9dbe-853b-48b4-b30f-437c375cc88a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "feature 2     0.006928\n",
              "feature 9    -0.000000\n",
              "feature 13    0.000000\n",
              "feature 14    0.092754\n",
              "dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 164
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##PCA"
      ],
      "metadata": {
        "id": "mtOPDTCCQ8Vo"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Explained variance is a statistical measure of how much variation in a dataset can be attributed to each of the principal components (eigenvectors) generated by a PCA. In other words, it tells us how much of the total variance is “explained” by each component"
      ],
      "metadata": {
        "id": "vNFAx57a3ohF"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "* *explained_variance_ratio_* method of PCA is used to get the ration of variance (eigenvalue / total eigenvalues)  \n",
        "* *Bar chart* is used to represent individual explained variances.  \n",
        "* *Step plot*is used to represent the variance explained by different principal components.  \n",
        "\n",
        "Data needs to be scaled before applying PCA technique."
      ],
      "metadata": {
        "id": "xCAmdlpG_ZIE"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# performing preprocessing part\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "sc = StandardScaler()\n",
        "train = sc.fit_transform(train)"
      ],
      "metadata": {
        "id": "RMvwSBuoEz6b"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Apply PCA to the data.\n",
        "from sklearn.decomposition import PCA\n",
        "pca = PCA()\n",
        "train_pca = pca.fit_transform(train)\n",
        "# Investigate the variance accounted for by each principal component.\n",
        "def scree_plot(pca):\n",
        "    '''\n",
        "    Creates a scree plot associated with the principal components \n",
        "    \n",
        "    INPUT: pca - the result of instantian of PCA in scikit learn\n",
        "            \n",
        "    OUTPUT:\n",
        "            None\n",
        "    '''\n",
        "    num_components = len(pca.explained_variance_ratio_)\n",
        "    ind = np.arange(num_components)\n",
        "    vals = pca.explained_variance_ratio_\n",
        " \n",
        "    plt.figure(figsize=(10, 6))\n",
        "    ax = plt.subplot(111)\n",
        "    cumvals = np.cumsum(vals)\n",
        "    ax.bar(ind, vals)\n",
        "    ax.plot(ind, cumvals)\n",
        " \n",
        "    ax.xaxis.set_tick_params(width=0)\n",
        "    ax.yaxis.set_tick_params(width=2, length=12)\n",
        " \n",
        "    ax.set_xlabel(\"Principal Component\")\n",
        "    ax.set_ylabel(\"Variance Explained (%)\")\n",
        "    plt.title('Explained Variance Per Principal Component')\n",
        "    \n",
        "\n",
        "scree_plot(pca)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 404
        },
        "id": "yN_FKQmF_xKq",
        "outputId": "ba363ab2-cd01-4659-fc9e-11f206d2d9ca"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 720x432 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Based on the PCA plot, the variance explained becomes extremely low after 11 components and it does not change afterwards. So I did the PCA again with 11 components."
      ],
      "metadata": {
        "id": "xU-0Pzg-AgJl"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "1.assume feature 1 as target and perform pca on train and test data with 11 components, then check the logistic regression."
      ],
      "metadata": {
        "id": "4pWc5cd3BkFG"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "train=df.sample(frac=0.8,random_state=200)\n",
        "test=df.drop(train.index)"
      ],
      "metadata": {
        "id": "D_cYpdaY8opD"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "x_train=train.drop(['feature 1','feature 11'],axis=1)\n",
        "x_test=test.drop(['feature 1','feature 11'],axis=1)\n",
        "y_train=pd.DataFrame(train['feature 1'])\n",
        "y_test=pd.DataFrame(test['feature 1'])"
      ],
      "metadata": {
        "id": "rB1795tD8YDW"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.decomposition import PCA\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "sc = StandardScaler()\n",
        " \n",
        "X_train_pca= sc.fit_transform(x_train)\n",
        "X_test_pca= sc.transform(x_test)\n",
        "\n",
        "pca = PCA(n_components = 11)\n",
        " \n",
        "X_train_pca = pca.fit_transform(X_train_pca)\n",
        "X_test_pca= pca.transform(X_test_pca)\n",
        "\n",
        "explained_variance = pca.explained_variance_ratio_\n",
        "explained_variance_sum=sum(explained_variance)*100\n",
        "print(explained_variance,explained_variance_sum)\n",
        "\n",
        "\n",
        "logistic_regression(X_train_pca,X_test_pca,y_train,y_test)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "P8IuYS5TBN77",
        "outputId": "68b7ccf3-08fe-438c-8868-364b353cb9b0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[0.24394023 0.20862203 0.13006454 0.07506126 0.06065598 0.05590119\n",
            " 0.05415694 0.04066585 0.03627418 0.02781236 0.02214953] 95.53040925694563\n",
            "Precision: 0.500\n",
            "Recall: 1.000\n",
            "F1 Score: 0.667\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
            "  y = column_or_1d(y, warn=True)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import plotly.express as px\n",
        "import numpy as np\n",
        "\n",
        "labels = {\n",
        "    str(i): f\"PC {i+1} ({var:.1f}%)\"\n",
        "    for i, var in enumerate(pca.explained_variance_ratio_ * 100)\n",
        "}\n",
        "\n",
        "total_var = pca.explained_variance_ratio_.sum() * 100\n",
        "fig = px.scatter_matrix(\n",
        "    X_train_pca,\n",
        "    labels=labels,\n",
        "    dimensions=range(11),\n",
        "    color=np.ravel(y_train,order='C'),\n",
        "    title=f'Total Explained Variance: {total_var:.2f}%',\n",
        ")\n",
        "fig.update_traces(diagonal_visible=False)\n",
        "fig.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 542
        },
        "id": "KSrjJmsiJ5AC",
        "outputId": "8465d3e2-4f1b-45bc-9c3d-7ed1ea425c9e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<html>\n",
              "<head><meta charset=\"utf-8\" /></head>\n",
              "<body>\n",
              "    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax) {MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n",
              "        <script src=\"https://cdn.plot.ly/plotly-2.8.3.min.js\"></script>                <div id=\"354a57d9-53f2-4e87-85d0-37290fbccfd3\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"354a57d9-53f2-4e87-85d0-37290fbccfd3\")) {                    Plotly.newPlot(                        \"354a57d9-53f2-4e87-85d0-37290fbccfd3\",                        [{\"dimensions\":[{\"axis\":{\"matches\":true},\"label\":\"PC 1 (24.4%)\",\"values\":[-2.7317848624636873,2.7647898728818125,-2.4669061496355473,-2.8723656616022737,-2.974647087870269,0.48168411003500883,1.3420290488491529,1.0159603526111458,0.023398959631936826,2.619382815209766,-2.3449126137498886,-1.58865309975423,3.6370185756611986,0.13339245752662957,-1.8043396980349846,4.261781738358161,-1.367176814337506,1.5093492621788753,0.966815496698909,-0.548584502852918,2.544698978452505,-3.7088286144416216,0.062060115560513725,0.22544350099205934,0.9093764368500209,-3.3264476156474356,0.25837592717067703,0.6530137279457675,1.2157535042930523,1.3357314624942282,0.41136629614435183,-2.187441772436272,-0.6815788086956442,1.8669935289628574,-2.7226430275483615,3.0878941605620036]},{\"axis\":{\"matches\":true},\"label\":\"PC 2 (20.9%)\",\"values\":[0.47958801177841126,-0.38336551552018766,1.3302036319802941,0.39519242340050453,-1.0252954823733722,-1.077834194940539,0.20978173584557724,-0.32083434337210764,-1.599727009226631,-0.858118941378512,-0.06396456189999994,-2.75372378064581,-1.6413750255093789,-1.8926786877459987,1.3099218085942705,-0.7434590849774431,-1.0717270296624626,-0.6726743322701154,0.012452504283012207,-1.8134052867280515,-0.24865984138759117,0.5091471187748735,-1.5130024199190597,-1.3858626293598646,5.650889382002155,0.18198479446178092,-1.0871939301387745,-0.065961556266312,-1.263568511339381,6.014623471672964,-1.7788972810393802,1.4862506675248441,0.4648540549007115,5.012587712572175,0.19098571515254134,0.012866412756864322]},{\"axis\":{\"matches\":true},\"label\":\"PC 3 (13.0%)\",\"values\":[0.4229147014016412,1.7620545151905562,-0.1096446840878193,0.7142793365251371,0.671268794113362,-2.0408316180781085,-2.7484723358979983,-2.8116402732982446,-0.4073185715858027,1.5210845644595474,1.1515846891603176,-0.3229065279726137,3.164433434988941,-1.6272021796518634,-2.104835171138735,1.2276445100024225,1.792349741697764,-0.9049632495366251,-0.34688565190849524,-0.3600935282897905,1.2210508238217563,1.3465058506715908,-1.545340828130514,-1.0774240463492895,-1.0930431416856787,1.0300545091936195,-2.0056914647451087,-2.945810363304693,1.3031838032642737,-0.7566004395381769,-0.33476542047105823,1.8322435186002162,1.9481994396204354,1.2095902975598027,0.45070358274748396,0.7743233826517497]},{\"axis\":{\"matches\":true},\"label\":\"PC 4 (7.5%)\",\"values\":[-0.3963834568686867,0.0213045405801357,-0.24956807777779738,-0.5297772707293883,2.559879263095943,-0.5837537220575746,-0.2917561189772659,-0.11820738279314862,0.15725033034813576,0.8581592233848241,-1.0016091446788422,-0.11782399459047914,0.5469712459081647,-0.637334263326258,5.025001208290089,0.7020836816877312,-0.8418264145698731,-0.7186795627932885,0.6630533882598938,-0.4136961284898776,0.10451580087127804,-2.3843577466562724,-0.7487891083299935,-0.8637972912940672,-1.0178102186591802,0.334833363575991,-0.5097471804480482,-0.22099286129989898,-0.25408557387983105,-0.28430004642630324,0.28194705514207474,1.4759201681669176,-0.009148202115226507,-0.2699119084024012,-0.36997399889071386,0.10241040474323561]},{\"axis\":{\"matches\":true},\"label\":\"PC 5 (6.1%)\",\"values\":[-0.03625631032594963,0.2069210812201278,0.2323051257753711,-0.07220369034695923,1.8761439028091098,0.24760116297865795,0.5975932393019798,0.7735731381768675,-1.76565474404028,-0.9995622881772482,-0.14663603173722695,-0.25185947923468754,-0.8187011386919835,0.17624685881825156,-2.465935540921297,0.10342761962553067,-1.897867998241337,0.5185232664769427,0.5320384956372509,-0.6378276657814086,0.4548816298007172,-1.3094110839041229,0.24402366778378992,0.3378694509082055,-0.907725314324665,1.166491497381914,0.526311771238962,0.7779873375988522,0.12129978528342272,-0.458138215398852,-1.7424013718070395,2.855947619136254,0.39920537608479156,-0.053329413363990226,-0.11926529760774218,1.5343835578677827]},{\"axis\":{\"matches\":true},\"label\":\"PC 6 (5.6%)\",\"values\":[-0.11087541628324665,0.7666100576117924,0.24351095991674712,-0.10051281390575534,-1.2721249243935702,-0.01003186076584053,0.11615844700965189,0.5585614123865985,-1.498610167662469,-0.7877962514985865,0.05041400216356929,-0.611229474813167,0.36104363829566893,-0.421135776296163,2.1120529658304625,1.1956002198254152,-1.0225445890137752,1.0153474097905002,-0.269665529745683,-0.9973045242997051,-0.17440096332554486,3.7472096305788503,-0.13172965002146547,0.3391073782077459,-0.8858710135555082,-0.4244721395311363,-0.1174866399638178,0.39029796857695015,-0.2638178163903741,-1.0387693750964033,-1.3007694893541586,-0.07207750363764392,-0.0283644032240892,-0.6175349059847755,-0.2825103805196894,1.543721519088614]},{\"axis\":{\"matches\":true},\"label\":\"PC 7 (5.4%)\",\"values\":[-0.10156375512051075,1.672936655437903,-0.18420496786563087,-0.058128126779430904,-0.7964437454745833,0.19859121712449337,-0.21265123897370847,-0.03211217866521717,-1.3527337652094478,-1.9957495970095513,2.0821048355538996,-0.5344525883954254,-0.00027074857057116303,0.37481627437481235,1.3820919820547406,-1.5943848695015175,1.2159342115417666,-0.389816621559057,-0.21689968451246186,0.40253931640832324,1.9374118762878836,-1.7371108903683556,0.3719142206302755,0.2473760676475451,0.487339067552962,-0.49740191365416436,0.2925054246429836,0.12430195055272884,1.5791002884118095,-0.7166749886924354,-1.520491041190531,-0.7324260162771404,1.016622003199042,-0.2324772201853241,-0.08694087544499943,-0.3926505579711088]},{\"axis\":{\"matches\":true},\"label\":\"PC 8 (4.1%)\",\"values\":[-0.5305075197931121,-0.700097035631031,-0.689179859489751,-0.6910543410854131,-0.1823007556829371,-0.007139895720768616,0.24862512996598055,-0.19395245189442994,0.10931792716452027,0.5522197615500334,-0.7374383545144076,1.1313975746770664,-0.6315719911218874,0.32152963636995274,-0.042757434447265485,-1.2819195836637522,-1.2678649621983002,-1.7401341986287289,1.8453076939105728,0.7607734717072914,2.0730016458362566,1.7441230811124482,-0.07246373436740539,-0.8541907403891315,-0.6051361348278624,-0.8556363262694857,0.21416904814707996,0.06940714421437581,1.0408732987863252,0.43889316166244957,-0.15507922131709193,0.3510916886160206,0.7212549499342998,0.36840881072825665,-0.3461677693920037,-0.40580171394816605]},{\"axis\":{\"matches\":true},\"label\":\"PC 9 (3.6%)\",\"values\":[-0.9028013173670694,1.8799153026747992,-1.217985526272302,-0.8939691255727069,2.753017210059374,0.1835887505334741,-0.1636912254210651,-0.07081736030873333,0.10592269138918088,-0.47586769325754036,-0.4275169657752039,-1.2572907044778157,0.059634362394581114,0.5346228445635891,-0.2798308336606142,-0.6069505636515548,0.04565272803466045,0.15715709762040306,-0.6268966413485453,0.567911618955192,-0.31041663898707994,1.5044667956126097,0.31633485021612373,0.24935501466075913,0.7483876616165422,0.15629404683442336,0.20262667970195844,-0.23892119540241308,0.2611182692817114,0.2906791642339121,0.2436696457148509,-0.44684279231768687,-0.9070096759027961,0.1660891866817869,-0.7574845989853498,-0.8421510620714571]},{\"axis\":{\"matches\":true},\"label\":\"PC 10 (2.8%)\",\"values\":[0.46435936608122497,1.8289216553733956,0.08766791407973624,0.6196558384225075,-0.810120519576281,-0.23935922905103912,-1.3273966123570429,-0.33283938214730546,-0.001125631006655579,-0.09870975530093049,-0.8096753651251903,0.41638310734967654,-0.5073692764143394,0.3895186666461568,0.25385236298184355,-0.7704826414167568,-1.4923351782164216,0.34310660212608013,0.7272474414645667,0.9495369557043069,-1.5686218464551742,-0.4935349477283294,0.32560680514169815,0.6707903427872361,-0.7539070231211052,-0.037057286882296446,0.10795135996781151,-0.5983546426585179,0.37591241515030355,0.3751643982249865,0.22168601975683846,-0.3277106487984867,0.29257263910085174,0.8052547164139522,0.5380745805011448,0.375336798981554]},{\"axis\":{\"matches\":true},\"label\":\"PC 11 (2.2%)\",\"values\":[0.06061588379158114,-1.199303353527915,-0.6893109027944965,0.20817038031439788,0.7576385921598477,0.24935201386031497,0.3901073003049538,-0.986602539464248,-0.9268195903733097,0.3841338970462395,-0.04382606799084848,1.2540074480340906,-0.0608502054304484,0.48551770699529917,0.3592321790617725,-0.02818493016917885,-0.5102327861830489,1.095522128112522,-1.0693549167315053,0.46971535848393675,0.4719409620594031,-0.11900827909592096,0.25687227197378454,0.2947610706181634,0.2538478390506136,0.1552583254504074,-0.211447193028776,-1.1869416373412818,0.12753430707117494,0.10460410905645817,-0.798494904318068,-1.0909265709863314,-0.12611218999523455,0.7199544825265556,0.26846097192164053,0.6801688395374544]}],\"hovertemplate\":\"%{xaxis.title.text}=%{x}<br>%{yaxis.title.text}=%{y}<br>color=%{marker.color}<extra></extra>\",\"legendgroup\":\"\",\"marker\":{\"color\":[1,0,1,0,1,0,1,1,0,0,0,1,0,0,1,1,1,1,1,1,1,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1],\"coloraxis\":\"coloraxis\",\"symbol\":\"circle\"},\"name\":\"\",\"showlegend\":false,\"type\":\"splom\",\"diagonal\":{\"visible\":false}}],                        {\"template\":{\"data\":{\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"choropleth\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"choropleth\"}],\"contour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"contour\"}],\"contourcarpet\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"contourcarpet\"}],\"heatmap\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmap\"}],\"heatmapgl\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmapgl\"}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"histogram2d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2d\"}],\"histogram2dcontour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2dcontour\"}],\"mesh3d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"mesh3d\"}],\"parcoords\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"parcoords\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}],\"scatter\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter\"}],\"scatter3d\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter3d\"}],\"scattercarpet\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattercarpet\"}],\"scattergeo\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergeo\"}],\"scattergl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergl\"}],\"scattermapbox\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattermapbox\"}],\"scatterpolar\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterternary\"}],\"surface\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"surface\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}]},\"layout\":{\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"autotypenumbers\":\"strict\",\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]],\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]},\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"geo\":{\"bgcolor\":\"white\",\"lakecolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"showlakes\":true,\"showland\":true,\"subunitcolor\":\"white\"},\"hoverlabel\":{\"align\":\"left\"},\"hovermode\":\"closest\",\"mapbox\":{\"style\":\"light\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"ternary\":{\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"title\":{\"x\":0.05},\"xaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2},\"yaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2}}},\"coloraxis\":{\"colorbar\":{\"title\":{\"text\":\"color\"}},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]},\"legend\":{\"tracegroupgap\":0},\"title\":{\"text\":\"Total Explained Variance: 95.53%\"},\"dragmode\":\"select\"},                        {\"responsive\": true}                    ).then(function(){\n",
              "                            \n",
              "var gd = document.getElementById('354a57d9-53f2-4e87-85d0-37290fbccfd3');\n",
              "var x = new MutationObserver(function (mutations, observer) {{\n",
              "        var display = window.getComputedStyle(gd).display;\n",
              "        if (!display || display === 'none') {{\n",
              "            console.log([gd, 'removed!']);\n",
              "            Plotly.purge(gd);\n",
              "            observer.disconnect();\n",
              "        }}\n",
              "}});\n",
              "\n",
              "// Listen for the removal of the full notebook cells\n",
              "var notebookContainer = gd.closest('#notebook-container');\n",
              "if (notebookContainer) {{\n",
              "    x.observe(notebookContainer, {childList: true});\n",
              "}}\n",
              "\n",
              "// Listen for the clearing of the current output cell\n",
              "var outputEl = gd.closest('.output');\n",
              "if (outputEl) {{\n",
              "    x.observe(outputEl, {childList: true});\n",
              "}}\n",
              "\n",
              "                        })                };                            </script>        </div>\n",
              "</body>\n",
              "</html>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "2.assume feature 5 as target and perform pca on train and test data with 11 components, then check the logistic regression."
      ],
      "metadata": {
        "id": "IZEhxi_X93nG"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "train=df.sample(frac=0.8,random_state=200)\n",
        "test=df.drop(train.index)"
      ],
      "metadata": {
        "id": "HNdaK4_L93nH"
      },
      "execution_count": 182,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "x_train=train.drop(['feature 5','feature 11'],axis=1)\n",
        "x_test=test.drop(['feature 5','feature 11'],axis=1)\n",
        "y_train=pd.DataFrame(train['feature 5'])\n",
        "y_test=pd.DataFrame(test['feature 5'])"
      ],
      "metadata": {
        "id": "57Y-FOj-93nI"
      },
      "execution_count": 183,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def logistic_regression(X_train,X_test,y_train,y_test):\n",
        "  clf = LogisticRegression(solver=\"liblinear\", random_state=0)\n",
        "  clf.fit(X_train,y_train)\n",
        "  y_pred=clf.predict(X_test)\n",
        "  print('Precision: %.3f' % precision_score(y_test, y_pred,average='micro'))\n",
        "  print('Recall: %.3f' % recall_score(y_test, y_pred,average='micro'))\n",
        "  print('F1 Score: %.3f' % f1_score(y_test, y_pred,average='micro'))"
      ],
      "metadata": {
        "id": "a182BELx_fop"
      },
      "execution_count": 187,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.decomposition import PCA\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "sc = StandardScaler()\n",
        " \n",
        "X_train_pca= sc.fit_transform(x_train)\n",
        "X_test_pca= sc.transform(x_test)\n",
        "\n",
        "pca = PCA(n_components = 11)\n",
        " \n",
        "X_train_pca = pca.fit_transform(X_train_pca)\n",
        "X_test_pca= pca.transform(X_test_pca)\n",
        "\n",
        "explained_variance = pca.explained_variance_ratio_\n",
        "explained_variance_sum=sum(explained_variance)*100\n",
        "print(explained_variance,explained_variance_sum)\n",
        "\n",
        "\n",
        "logistic_regression(X_train_pca,X_test_pca,y_train,y_test)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "accbb4b7-283c-4ce3-c175-3a1eefc5574f",
        "id": "-IvZLdBj93nI"
      },
      "execution_count": 188,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[0.23973587 0.20917227 0.13496187 0.08248058 0.06277965 0.05719636\n",
            " 0.04392346 0.04094427 0.03754695 0.02601389 0.02111037] 95.58655562839715\n",
            "Precision: 0.444\n",
            "Recall: 0.444\n",
            "F1 Score: 0.444\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning:\n",
            "\n",
            "A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import plotly.express as px\n",
        "import numpy as np\n",
        "\n",
        "labels = {\n",
        "    str(i): f\"PC {i+1} ({var:.1f}%)\"\n",
        "    for i, var in enumerate(pca.explained_variance_ratio_ * 100)\n",
        "}\n",
        "\n",
        "total_var = pca.explained_variance_ratio_.sum() * 100\n",
        "fig = px.scatter_matrix(\n",
        "    X_train_pca,\n",
        "    labels=labels,\n",
        "    dimensions=range(11),\n",
        "    color=np.ravel(y_train,order='C'),\n",
        "    title=f'Total Explained Variance: {total_var:.2f}%',\n",
        ")\n",
        "fig.update_traces(diagonal_visible=False)\n",
        "fig.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 542
        },
        "outputId": "1ce5a1d7-2dcd-4828-c5ac-fed7c47c0f34",
        "id": "xI5VUxll93nJ"
      },
      "execution_count": 186,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<html>\n",
              "<head><meta charset=\"utf-8\" /></head>\n",
              "<body>\n",
              "    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax) {MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n",
              "        <script src=\"https://cdn.plot.ly/plotly-2.8.3.min.js\"></script>                <div id=\"a546163e-16f0-4a30-86d2-66c339b18a73\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"a546163e-16f0-4a30-86d2-66c339b18a73\")) {                    Plotly.newPlot(                        \"a546163e-16f0-4a30-86d2-66c339b18a73\",                        [{\"dimensions\":[{\"axis\":{\"matches\":true},\"label\":\"PC 1 (24.0%)\",\"values\":[-2.58815100202481,2.4098511624653107,-2.238329374804108,-2.815244450286393,-2.9106890799390444,0.4233503915801849,1.484408954059128,1.1202638633451423,0.032709616522886883,2.652895779164993,-2.7418421406490867,-1.6372867325196596,3.1833542935480916,-0.0035898041750789767,-1.4832312517921236,4.246507905494894,-1.7788213090786738,1.5239076700882521,1.1329500277981623,-0.62876743860849,2.1840421133017975,-3.69628095427087,-0.05155529834940006,0.10715897538547338,1.2764837442081973,-3.2807787919029763,0.2648974007283001,0.7746252789798896,0.8104623495204368,1.9611945468527618,0.411630819169679,-2.045622315961872,-0.8191432616088901,2.269701596291516,-2.6684398310117805,3.1173765484781573]},{\"axis\":{\"matches\":true},\"label\":\"PC 2 (20.9%)\",\"values\":[0.4747115873803168,-0.0944630766450283,1.2374385237309462,0.7325502192768096,-1.0502165702336175,-1.1050056824531884,-0.28635080387725453,-0.7892927256634328,-1.5768978549915682,-0.941817832368706,0.6135967752067248,-2.8865187144611237,-1.351696599060351,-1.8338182654988031,0.9158876079602138,-1.1837955522892913,-0.6950585403828419,-1.0099900770448076,-0.3633523764559282,-1.922724297296634,-0.24062535588531536,1.0078917557814548,-1.4479620560343829,-1.299674258084997,5.6322041731352614,0.5505370546028288,-1.392065525179294,-0.5145389857244328,-0.8924989102220914,5.7767271921775585,-1.785470389252433,1.761208453913845,0.8568746633230783,4.971368196862183,0.49464333113664166,-0.36180508538233547]},{\"axis\":{\"matches\":true},\"label\":\"PC 3 (13.5%)\",\"values\":[-0.0611709785500581,1.8743344961242545,-0.7098394561587461,0.8496433685003856,0.25517845166847675,-1.47690927044027,-2.9398432013805875,-2.9527782347416722,0.4699889656926963,2.3048644868382104,0.744700953571994,-0.22740489409286513,3.4359735997269176,-0.946384848938652,-2.88076383194115,1.184135946399058,1.0856789854798903,-1.005730303769533,-0.4976298678382733,-0.35966293838502755,0.4107919321125103,1.4735403951686512,-0.9425052996570508,-0.5070110728007802,-1.437366600175582,1.1039576328312166,-2.0659978770474536,-3.1452173091719007,1.4343230232990016,-0.7990186721141039,0.590655947763791,1.6554749062443392,1.8511800984386775,1.0933463363929572,0.6397585386436015,0.49770659230707565]},{\"axis\":{\"matches\":true},\"label\":\"PC 4 (8.2%)\",\"values\":[0.3071710540989912,-0.020897941493222293,0.5114570402135511,-0.593510688215457,2.701089051925748,-1.327473827426777,-0.1635154209262978,-0.0564257653929415,-1.0819313792093228,0.1446383025009595,-0.5788986669913588,0.0580909697658138,0.5884172951860273,-1.4895722694887672,4.396135489425968,1.297961105338934,-0.08738744095835191,-0.24718677036883926,0.9117683528530667,-0.3858581819335,1.1906584475979765,-1.932024570593911,-1.4659086904195437,-1.4057920073774555,-1.248164975463585,0.2771450723350148,-0.4513515356494342,-0.13656389822510412,-0.306238604302728,-0.7332043212456055,-0.9779786324949389,1.7759249907402623,0.27051219292441064,-0.25597375341956824,-0.5642866457672604,1.079176622457246]},{\"axis\":{\"matches\":true},\"label\":\"PC 5 (6.3%)\",\"values\":[-0.4701243423351973,0.1191207971771006,-0.7551448487976832,-0.051646917530838714,-0.7139233744538666,0.04258230468626895,-0.7295607758505789,-0.8236235792210832,2.1038103609032603,1.1622415892171662,0.03195740311662442,-0.02511491852791015,0.7662092590760552,0.25443085400954946,3.3400536788096438,-0.6936214124966966,1.3516215729794105,-1.0924333466896534,-0.45169618695304886,0.5882086738356275,-0.5623900164640214,-0.5752161648987385,0.052746927592049166,-0.23011893765418695,0.8827970544318336,-0.76815740239597,-0.544743343913468,-0.8166200981939977,0.1978780368404239,0.6081045540289152,2.0717574575994138,-2.092051601725545,-0.2975836805593278,0.07636997253404619,0.11556172376408752,-2.0716812719396627]},{\"axis\":{\"matches\":true},\"label\":\"PC 6 (5.7%)\",\"values\":[0.27030758823255585,0.07139164785803936,0.4883933556757851,0.004044097134999525,-2.02667900624763,-0.3281706081654005,0.03384420298615186,0.23201207081621902,-0.6879797941084884,-0.1629428617811893,-0.0889130617545625,-0.11444006094061909,0.5531623765547746,-0.7337910538410912,1.8649727077334644,1.4366602768345476,0.01146209622633013,0.966048852512742,-0.32603643418213835,-0.578116273727458,-0.3235954444251407,4.322908939884827,-0.4570317200057566,-0.0157436126593955,-0.4804810302734855,-0.8511470611964286,-0.2766636644824018,0.08491095008247035,-0.6131409345085965,-0.6866343076191415,-0.5255631634308137,-1.2212899640941346,-0.29371541838194903,-0.46388126332157387,-0.18187022064412475,1.0977077972586151]},{\"axis\":{\"matches\":true},\"label\":\"PC 7 (4.4%)\",\"values\":[-1.285598373875657,2.473766254792784,-1.3348559433228773,-0.27633085822402204,1.1121011890825863,0.8094043806716898,-0.6186495492095118,0.10580909619535069,-0.3688699569114278,-0.6122549440910731,-0.24885262378415446,-1.5159411307878874,0.02636706361120732,1.1218761261673351,1.252951919882181,-0.8472402253819826,-1.9750455362718424,-0.05163481080293378,-0.4192154055471217,-0.37805854058579175,-1.0457052416853414,0.9181517565297713,1.0231207653854466,1.1240257547693924,-0.329008890436059,0.4470439591852648,0.07735942302089786,-0.0829061168753729,0.7463989650021198,-0.16227127972671035,-0.18553026420788185,0.8051617600169122,0.0037164152598321495,0.054337176945369,-0.22137438934428755,-0.1422479254462052]},{\"axis\":{\"matches\":true},\"label\":\"PC 8 (4.1%)\",\"values\":[-0.3506890502034032,-0.3347126459491473,-0.5513480158472368,-0.48103511284350103,-0.821088740054676,-0.01290275608494375,0.05016809976354562,-0.2678740781648664,-0.21301212588749696,0.17635762675027244,-0.336346293660489,1.1861063626723949,-0.652828236253133,0.37295648402255627,0.21656683643929944,-1.5314911075822175,-1.1380449219255775,-1.6889672115761796,1.8690212170391924,0.8802834379768981,2.2568803063779383,1.2158855890493412,0.01805809208025041,-0.6997899173066632,-0.679452069671876,-0.9687249533523189,0.24612911817388616,0.008113551258457466,1.3331008727722125,0.26297743147589553,-0.49679367772537086,0.12163092955049806,1.0670440412350195,0.4052411416039628,-0.19165747447747572,-0.2697627496750512]},{\"axis\":{\"matches\":true},\"label\":\"PC 9 (3.8%)\",\"values\":[-0.7646366912408861,-1.0127975584344817,-0.6944605441202848,-1.0921311022960916,2.597020437638258,-0.014104974120500276,0.8749151718890263,0.23380947868121793,0.8212489036696353,0.837613649796683,-0.9647928860070912,-0.3015869030090565,0.07756741462584181,-0.16727038279690595,-0.9116902380903578,0.4399201005027503,0.18322431948223594,-0.4070303094759032,-0.08150410407370987,-0.1044376739117331,0.3714133129653241,2.0925897631114276,-0.37594200218335017,-0.7736207910552595,0.6068627315866979,0.10928834072424609,0.015511479462376514,0.26699839573402373,-0.6067007045789046,0.5126460032548962,0.8055847636647281,0.39387687604428717,-1.1447817911459655,-0.2042868376775204,-0.8374546697180907,-0.7808609788975598]},{\"axis\":{\"matches\":true},\"label\":\"PC 10 (2.6%)\",\"values\":[-0.5664966431766261,-1.1504652186739563,0.16470868856436743,0.16456534815430457,-1.4697648123452756,0.44935773902514364,0.21767224147671976,0.5901432324197592,0.8934552190661723,0.6682769311412733,0.15844460484193865,-0.6389143392135102,0.2535095560374868,0.06872346261311034,0.25947915310634784,0.43993184481377284,-0.42143984351386127,-1.1129716966572905,0.2655190096389081,-1.5945827693739063,-0.44152120931809274,-0.13752413573094877,0.22969237377043336,0.05797201585728777,-0.5039054262718493,0.2758592406832359,-0.08853877000849047,0.8556137872012068,-0.22786024155284554,-0.16492342691729484,0.7033726312159306,1.9561872257047535,0.4826070038562227,-0.560932039889455,0.15232386152957328,-0.22757459807454755]},{\"axis\":{\"matches\":true},\"label\":\"PC 11 (2.1%)\",\"values\":[0.4687647852263932,1.9241941865456924,0.9511661499187476,-0.17901821267289175,-0.1946312296844433,-0.6340568811163731,-0.5569774777988857,0.8570920623519678,0.5793296854888482,-0.6149087847921871,-0.20290256250202449,-0.6343027562956297,-0.11932352414628848,-0.8009254554237496,-0.5731120238353105,-0.12188860143006074,0.3902974579868133,-0.5199694838852181,1.3153913307996674,0.42642405334194705,-0.42869990234156213,0.10488151762875561,-0.6098595106938487,-0.5024559397325286,-0.11646047861290354,-0.3048565798852886,0.143608765145956,0.8674249557999638,-0.14321111468623116,0.07421722053941482,0.6150802069627708,0.12191993960518063,-0.24879566140374956,-0.5766149243805205,-0.2267869123311571,-0.530034299691265]}],\"hovertemplate\":\"%{xaxis.title.text}=%{x}<br>%{yaxis.title.text}=%{y}<br>color=%{marker.color}<extra></extra>\",\"legendgroup\":\"\",\"marker\":{\"color\":[17,5,17,17,17,13,13,13,18,18,3,17,5,13,17,13,3,13,17,14,1,16,13,13,12,17,13,13,5,20,18,17,11,17,17,13],\"coloraxis\":\"coloraxis\",\"symbol\":\"circle\"},\"name\":\"\",\"showlegend\":false,\"type\":\"splom\",\"diagonal\":{\"visible\":false}}],                        {\"template\":{\"data\":{\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"choropleth\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"choropleth\"}],\"contour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"contour\"}],\"contourcarpet\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"contourcarpet\"}],\"heatmap\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmap\"}],\"heatmapgl\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmapgl\"}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"histogram2d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2d\"}],\"histogram2dcontour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2dcontour\"}],\"mesh3d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"mesh3d\"}],\"parcoords\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"parcoords\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}],\"scatter\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter\"}],\"scatter3d\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter3d\"}],\"scattercarpet\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattercarpet\"}],\"scattergeo\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergeo\"}],\"scattergl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergl\"}],\"scattermapbox\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattermapbox\"}],\"scatterpolar\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterternary\"}],\"surface\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"surface\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}]},\"layout\":{\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"autotypenumbers\":\"strict\",\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]],\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]},\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"geo\":{\"bgcolor\":\"white\",\"lakecolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"showlakes\":true,\"showland\":true,\"subunitcolor\":\"white\"},\"hoverlabel\":{\"align\":\"left\"},\"hovermode\":\"closest\",\"mapbox\":{\"style\":\"light\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"ternary\":{\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"title\":{\"x\":0.05},\"xaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2},\"yaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2}}},\"coloraxis\":{\"colorbar\":{\"title\":{\"text\":\"color\"}},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]},\"legend\":{\"tracegroupgap\":0},\"title\":{\"text\":\"Total Explained Variance: 95.59%\"},\"dragmode\":\"select\"},                        {\"responsive\": true}                    ).then(function(){\n",
              "                            \n",
              "var gd = document.getElementById('a546163e-16f0-4a30-86d2-66c339b18a73');\n",
              "var x = new MutationObserver(function (mutations, observer) {{\n",
              "        var display = window.getComputedStyle(gd).display;\n",
              "        if (!display || display === 'none') {{\n",
              "            console.log([gd, 'removed!']);\n",
              "            Plotly.purge(gd);\n",
              "            observer.disconnect();\n",
              "        }}\n",
              "}});\n",
              "\n",
              "// Listen for the removal of the full notebook cells\n",
              "var notebookContainer = gd.closest('#notebook-container');\n",
              "if (notebookContainer) {{\n",
              "    x.observe(notebookContainer, {childList: true});\n",
              "}}\n",
              "\n",
              "// Listen for the clearing of the current output cell\n",
              "var outputEl = gd.closest('.output');\n",
              "if (outputEl) {{\n",
              "    x.observe(outputEl, {childList: true});\n",
              "}}\n",
              "\n",
              "                        })                };                            </script>        </div>\n",
              "</body>\n",
              "</html>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#K-means Clustering"
      ],
      "metadata": {
        "id": "WHjQ8fbcA4gR"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "train=df.sample(frac=0.8,random_state=200)\n",
        "test=df.drop(train.index)"
      ],
      "metadata": {
        "id": "QMo-k8cPBSAj"
      },
      "execution_count": 211,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "x_train=train.drop(['feature 9','feature 11'],axis=1)\n",
        "x_test=test.drop(['feature 9','feature 11'],axis=1)\n",
        "y_train=pd.DataFrame(train['feature 9'])\n",
        "y_test=pd.DataFrame(test['feature 9'])"
      ],
      "metadata": {
        "id": "ipY9kpVZBSv_"
      },
      "execution_count": 218,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "sc = StandardScaler()\n",
        " \n",
        "train_pca= sc.fit_transform(x_train)\n",
        "pca = PCA(0.98, random_state=0).fit(x_train)\n",
        "train_pca = pca.fit_transform(train_pca)"
      ],
      "metadata": {
        "id": "yH0x5suyHCL5"
      },
      "execution_count": 219,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.cluster import KMeans\n",
        "def get_kmeans_score(data, center):\n",
        "    #instantiate kmeans\n",
        "    kmeans = KMeans(n_clusters=center)\n",
        "\n",
        "    # Then fit the model to your data using the fit method\n",
        "    model = kmeans.fit(data)\n",
        "    \n",
        "    # Obtain a score related to the model fit\n",
        "    score = np.abs(model.score(data))\n",
        "    \n",
        "    return score\n",
        "# Over a number of different cluster counts...\n",
        "# run k-means clustering on the data and...\n",
        "# compute the average within-cluster distances.\n",
        "scores = []\n",
        "centers = list(range(1,35,3))\n",
        "\n",
        "for center in centers:\n",
        "    scores.append(get_kmeans_score(train_pca, center))\n",
        "# Investigate the change in within-cluster distance across number of clusters.\n",
        "# matplotlib's plot function to visualize this relationship.\n",
        "plt.plot(centers, scores, linestyle='--', marker='o', color='b');\n",
        "plt.xlabel('K');\n",
        "plt.ylabel('SSE');\n",
        "plt.title('SSE vs. K')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 312
        },
        "id": "NWwvZf8tA3sZ",
        "outputId": "cf67ff1d-e915-4c7e-f32b-a6cf8c261cf4"
      },
      "execution_count": 220,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 1.0, 'SSE vs. K')"
            ]
          },
          "metadata": {},
          "execution_count": 220
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "The elbow point represents the point in the SSE / Inertia plot where SSE or inertia starts decreasing in a linear manner. In this case, it is no. of clusters = 25 where the SSE starts decreasing in the linear manner."
      ],
      "metadata": {
        "id": "suW4NfhreL4H"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Re-fit the k-means model with the selected number of clusters and obtain\n",
        "# cluster predictions for the general population demographics data.\n",
        "\n",
        "# Re-fit the k-means model with the selected number of clusters and obtain\n",
        "# cluster predictions for the general population demographics data.\n",
        "\n",
        "kmeans = KMeans(n_clusters=25)\n",
        "model_general = kmeans.fit(train_pca)\n",
        "predict_general = model_general.predict(train_pca)\n",
        "predict_general"
      ],
      "metadata": {
        "id": "E5ELN0w5BjPU",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "9d80f853-841a-4c6e-9cf8-e309ccd64e01"
      },
      "execution_count": 222,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([22, 15, 22,  2, 10,  3,  1,  1, 11, 14, 24, 12, 20,  3,  6,  5,  0,\n",
              "       19, 21,  9, 18,  8,  3,  3, 17,  2,  9,  1, 13, 17, 11,  7, 16,  4,\n",
              "        2, 23], dtype=int32)"
            ]
          },
          "metadata": {},
          "execution_count": 222
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Hierarchical Clustering"
      ],
      "metadata": {
        "id": "a0O1Xak-Hwhz"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Hierarchical is an unsupervised learning algorithm which is based on clustering data based on hierarchical ordering.  \n",
        "The hierarchical clustering can be classified into the following two different type of clustering:\n",
        "\n",
        "* Agglomerative (bottom-up) hierarchical clustering\n",
        "* Divisive (top-down) hierarchical clustering  \n",
        "following codes demonstrate Agglomerative clustering, then Dendogram is ploted."
      ],
      "metadata": {
        "id": "BEu7achgkiLO"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "sc = StandardScaler()\n",
        "df_scaled = sc.fit_transform(df)\n",
        "df_normalized = normalize(df_scaled)\n",
        "#\n",
        "# Reduce the dimensionality of data to 3 features\n",
        "#\n",
        "pca = PCA(n_components=3)\n",
        "df_pca = pca.fit_transform(df_normalized)\n",
        "df_pca = pd.DataFrame(df_pca)\n",
        "df_pca.columns = ['P1', 'P2', 'P3']\n",
        "#\n",
        "# Create the Dendogram plot\n",
        "#\n",
        "print('The following Dendogram plot is created.:')\n",
        "plt.figure(figsize =(8, 8))\n",
        "plt.title('Visualising the data')\n",
        "dendrogram = hc.dendrogram((hc.linkage(df_pca, method ='ward')))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 516
        },
        "id": "ooWXunwsHybh",
        "outputId": "625871fe-6054-4248-8a0c-90102fbab4f9"
      },
      "execution_count": 224,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The following Dendogram plot is created.:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 576x576 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "lets select different number of clusters and create plot based on slicing the dendogram at different levels.I want to slice the dendogram at four different levels"
      ],
      "metadata": {
        "id": "sS4_CA9gmzpB"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#\n",
        "# Create the clusters using Agglomerative hierarchical clustering\n",
        "# At level 1, there will be 5 clusters\n",
        "#\n",
        "agc = AgglomerativeClustering(n_clusters = 5)\n",
        "plt.figure(figsize =(8, 8))\n",
        "plt.scatter(df_pca['P1'], df_pca['P2'], c = agc.fit_predict(df_pca), cmap ='rainbow')\n",
        "plt.title(\"Agglomerative Hierarchical Clusters - Scatter Plot\", fontsize=18)\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 503
        },
        "id": "nLWqPafkIJwh",
        "outputId": "5526f923-c6f2-46d2-b376-be32fe4258cf"
      },
      "execution_count": 225,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 576x576 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# At level 2, there will be 4 clusters\n",
        "# Create the clusters using Agglomerative hierarchical clustering\n",
        "# \n",
        "agc = AgglomerativeClustering(n_clusters = 4)\n",
        "plt.figure(figsize =(8, 8))\n",
        "plt.scatter(df_pca['P1'], df_pca['P2'], c = agc.fit_predict(df_pca), cmap ='rainbow')\n",
        "plt.title(\"Agglomerative Hierarchical Clusters - Scatter Plot\", fontsize=18)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 503
        },
        "id": "dlpM-vs0Iq4R",
        "outputId": "1bda7624-b372-4904-f7ee-28a04351d47d"
      },
      "execution_count": 226,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 576x576 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# At level 3, there will be 3 clusters\n",
        "# Create the clusters using Agglomerative hierarchical clustering\n",
        "#\n",
        "agc = AgglomerativeClustering(n_clusters = 3)\n",
        "plt.figure(figsize =(8, 8))\n",
        "plt.scatter(df_pca['P1'], df_pca['P2'], c = agc.fit_predict(df_pca), cmap ='rainbow')\n",
        "plt.title(\"Agglomerative Hierarchical Clusters - Scatter Plot\", fontsize=18)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 503
        },
        "id": "RjKHrvfyI3_y",
        "outputId": "747f87e6-47b3-4a5b-910c-c277d626f2ca"
      },
      "execution_count": 227,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 576x576 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# At level 4, there will be 2 clusters\n",
        "# Create the clusters using Agglomerative hierarchical clustering\n",
        "#\n",
        "agc = AgglomerativeClustering(n_clusters = 2)\n",
        "plt.figure(figsize =(8, 8))\n",
        "plt.scatter(df_pca['P1'], df_pca['P2'], c = agc.fit_predict(df_pca), cmap ='rainbow')\n",
        "plt.title(\"Agglomerative Hierarchical Clusters - Scatter Plot\", fontsize=18)\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 503
        },
        "id": "YnzfTYbiJLO8",
        "outputId": "226e3a47-5dee-427d-9400-e273fc71d045"
      },
      "execution_count": 228,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 576x576 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#SVM"
      ],
      "metadata": {
        "id": "s4qEPqHFpPL-"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "the code below makes use of SVC class (from sklearn.svm import SVC) for fitting a model. SVC, or Support Vector Classifier, is a supervised machine learning algorithm typically used for classification tasks.  \n",
        "Here I use linear kernel to check whether the data is linear separable or not"
      ],
      "metadata": {
        "id": "PyW3pAug8zXK"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# try different features as target value\n",
        "#train=train.drop('feature 11',axis=1)\n",
        "#test=test.drop('feature 11',axis=1)\n",
        "for each in train.columns :\n",
        "  x_train=train.drop(each,axis=1)\n",
        "  x_test=test.drop(each,axis=1)\n",
        "  y_train=pd.DataFrame(train[each])\n",
        "  y_test=pd.DataFrame(test[each])\n",
        "  # Feature Scaling\n",
        "  from sklearn.metrics import accuracy_score\n",
        "  sc = StandardScaler()\n",
        "  sc.fit(x_train)\n",
        "  X_train_std = sc.transform(x_train)\n",
        "  X_test_std = sc.transform(x_test)\n",
        " \n",
        "  # Training a SVM classifier using SVC class\n",
        "  svm = SVC(kernel= 'linear', random_state=1, C=0.1)\n",
        "  svm.fit(X_train_std, np.ravel(y_train,order='C'))\n",
        " \n",
        "  # Mode performance\n",
        " \n",
        "  y_pred = svm.predict(X_test_std)\n",
        "  print(each,'as target')\n",
        "  print('Accuracy: %.3f' % accuracy_score(y_test, y_pred))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BjIri2OFuWcT",
        "outputId": "d6d650d3-f489-4703-82e4-ecaede0fa352"
      },
      "execution_count": 267,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "feature 0 as target\n",
            "Accuracy: 1.000\n",
            "feature 1 as target\n",
            "Accuracy: 0.778\n",
            "feature 2 as target\n",
            "Accuracy: 0.444\n",
            "feature 3 as target\n",
            "Accuracy: 0.889\n",
            "feature 4 as target\n",
            "Accuracy: 0.667\n",
            "feature 5 as target\n",
            "Accuracy: 0.444\n",
            "feature 6 as target\n",
            "Accuracy: 0.889\n",
            "feature 7 as target\n",
            "Accuracy: 0.889\n",
            "feature 8 as target\n",
            "Accuracy: 0.556\n",
            "feature 9 as target\n",
            "Accuracy: 0.778\n",
            "feature 10 as target\n",
            "Accuracy: 0.889\n",
            "feature 12 as target\n",
            "Accuracy: 0.444\n",
            "feature 13 as target\n",
            "Accuracy: 0.222\n",
            "feature 14 as target\n",
            "Accuracy: 0.556\n",
            "feature 15 as target\n",
            "Accuracy: 1.000\n",
            "feature 16 as target\n",
            "Accuracy: 0.778\n",
            "feature 17 as target\n",
            "Accuracy: 0.889\n",
            "feature 18 as target\n",
            "Accuracy: 0.667\n",
            "feature 19 as target\n",
            "Accuracy: 1.000\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# try different features as target value \n",
        "x_train=train.drop(['feature 1','feature 11'],axis=1)\n",
        "x_test=test.drop(['feature 1','feature 11'],axis=1)\n",
        "y_train=pd.DataFrame(train['feature 1'])\n",
        "y_test=pd.DataFrame(test['feature 1'])"
      ],
      "metadata": {
        "id": "xt_fPqMC25w7"
      },
      "execution_count": 250,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.linear_model import SGDClassifier\n",
        " \n",
        "# Instantiate SVM classifier using SGDClassifier\n",
        "svm = SGDClassifier(loss='hinge')\n",
        " \n",
        "# Fit the model\n",
        "svm.fit(X_train_std, y_train)\n",
        " \n",
        "# Model Performance\n",
        "y_pred = svm.predict(X_test_std)\n",
        "print('Accuracy: %.3f' % accuracy_score(y_test, y_pred))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aUulv9Et2omu",
        "outputId": "b0066b51-f2e7-4e6f-d365-c38ec726a937"
      },
      "execution_count": 252,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy: 0.667\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning:\n",
            "\n",
            "A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Feature scaling\n",
        "sc = StandardScaler()\n",
        "sc.fit(x_train)\n",
        "X_train_std = sc.transform(x_train)\n",
        "X_test_std = sc.transform(x_test)\n",
        " \n",
        "# Fit the model with RBF kernel\n",
        "svc = SVC(kernel='rbf', random_state=1, gamma=0.10, C=10.0)\n",
        "svc.fit(X_train_std, y_train)\n",
        "y_pred = svc.predict(X_test_std)\n",
        " \n",
        "# Check the performance\n",
        "print('Accuracy: %.3f' % accuracy_score(y_test, y_pred))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0hJeKX41t94U",
        "outputId": "2be54008-d138-436f-87c1-934b284cac46"
      },
      "execution_count": 253,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy: 0.778\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning:\n",
            "\n",
            "A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#One-class SVM"
      ],
      "metadata": {
        "id": "n6UwcAXttIMs"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "data=df.copy()"
      ],
      "metadata": {
        "id": "53anFLVftMu7"
      },
      "execution_count": 323,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "pd.options.mode.chained_assignment = None  # default='warn'\n",
        "data[\"feature 14\"] = np.log((data[\"feature 14\"] + 0.1).astype(float)) \n",
        "data[\"feature 13\"] = np.log((data[\"feature 13\"] + 0.1).astype(float)) \n",
        "data[\"feature 8\"] = np.log((data[\"feature 8\"] + 0.1).astype(float))\n",
        "data[\"feature 5\"] = np.log((data[\"feature 5\"] + 0.1).astype(float)) \n",
        "data[\"feature 7\"] = np.log((data[\"feature 7\"] + 0.1).astype(float)) \n",
        "data[\"feature 2\"] = np.log((data[\"feature 2\"] + 0.1).astype(float))"
      ],
      "metadata": {
        "id": "-BLiIt7Zc93G"
      },
      "execution_count": 324,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data.columns"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TE_nlzyidFoL",
        "outputId": "adce5977-c43b-4a21-e6a7-4155e122788b"
      },
      "execution_count": 325,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['feature 0', 'feature 1', 'feature 2', 'feature 3', 'feature 4',\n",
              "       'feature 5', 'feature 6', 'feature 7', 'feature 8', 'feature 9',\n",
              "       'feature 10', 'feature 11', 'feature 12', 'feature 13', 'feature 14',\n",
              "       'feature 15', 'feature 16', 'feature 17', 'feature 18', 'feature 19'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 325
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 288
        },
        "id": "p73-r-6lc9wP",
        "outputId": "28da9293-d0f8-449f-eb31-4db39b8846f2"
      },
      "execution_count": 326,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   feature 0  feature 1  feature 2  feature 3  feature 4  feature 5  \\\n",
              "0          0          0  -2.302585          2          0   2.572612   \n",
              "1          1          0   1.808289          1          0   2.406945   \n",
              "2          0          0   1.808289          1          0   1.131402   \n",
              "3          0          1   1.808289          1          0   1.131402   \n",
              "4          0          1   0.095310          2          0   2.572612   \n",
              "\n",
              "   feature 6  feature 7  feature 8  feature 9  feature 10  feature 11  \\\n",
              "0          0   1.808289   0.095310          1           0           1   \n",
              "1          3   1.808289   1.629241          0           0           1   \n",
              "2         11   1.808289   0.095310          0           0           1   \n",
              "3          3   1.808289   0.095310          0           0           1   \n",
              "4          0   1.808289   0.095310          1           0           1   \n",
              "\n",
              "   feature 12  feature 13  feature 14  feature 15  feature 16  feature 17  \\\n",
              "0           1    0.741937    1.960095           8           1           1   \n",
              "1           1    1.960095    1.960095           8           1           2   \n",
              "2           1    1.960095    1.960095           8           1           2   \n",
              "3           0   -2.302585   -2.302585           8           1           2   \n",
              "4           0    3.222868    3.182212           8           1           1   \n",
              "\n",
              "   feature 18  feature 19  \n",
              "0           0           1  \n",
              "1           0           1  \n",
              "2           0           1  \n",
              "3           0           1  \n",
              "4           1           1  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-48810728-729a-4748-b8cc-475cea782d56\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>feature 0</th>\n",
              "      <th>feature 1</th>\n",
              "      <th>feature 2</th>\n",
              "      <th>feature 3</th>\n",
              "      <th>feature 4</th>\n",
              "      <th>feature 5</th>\n",
              "      <th>feature 6</th>\n",
              "      <th>feature 7</th>\n",
              "      <th>feature 8</th>\n",
              "      <th>feature 9</th>\n",
              "      <th>feature 10</th>\n",
              "      <th>feature 11</th>\n",
              "      <th>feature 12</th>\n",
              "      <th>feature 13</th>\n",
              "      <th>feature 14</th>\n",
              "      <th>feature 15</th>\n",
              "      <th>feature 16</th>\n",
              "      <th>feature 17</th>\n",
              "      <th>feature 18</th>\n",
              "      <th>feature 19</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>-2.302585</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>2.572612</td>\n",
              "      <td>0</td>\n",
              "      <td>1.808289</td>\n",
              "      <td>0.095310</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0.741937</td>\n",
              "      <td>1.960095</td>\n",
              "      <td>8</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1.808289</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>2.406945</td>\n",
              "      <td>3</td>\n",
              "      <td>1.808289</td>\n",
              "      <td>1.629241</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1.960095</td>\n",
              "      <td>1.960095</td>\n",
              "      <td>8</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1.808289</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1.131402</td>\n",
              "      <td>11</td>\n",
              "      <td>1.808289</td>\n",
              "      <td>0.095310</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1.960095</td>\n",
              "      <td>1.960095</td>\n",
              "      <td>8</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1.808289</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1.131402</td>\n",
              "      <td>3</td>\n",
              "      <td>1.808289</td>\n",
              "      <td>0.095310</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>-2.302585</td>\n",
              "      <td>-2.302585</td>\n",
              "      <td>8</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0.095310</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>2.572612</td>\n",
              "      <td>0</td>\n",
              "      <td>1.808289</td>\n",
              "      <td>0.095310</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>3.222868</td>\n",
              "      <td>3.182212</td>\n",
              "      <td>8</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-48810728-729a-4748-b8cc-475cea782d56')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-48810728-729a-4748-b8cc-475cea782d56 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-48810728-729a-4748-b8cc-475cea782d56');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 326
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# we're using a one-class SVM, so we need.. a single class. \n",
        "# grab out the feature 1 value as the target for training and testing. \n",
        "# since we're only selecting a single column from the `data` \n",
        "# dataframe, we'll just get a series, not a new dataframe\n",
        "target = data['feature 0']\n",
        "# find the proportion of outliers we expect\n",
        "# because target is a series, we just compare against itself \n",
        "# rather than a column.\n",
        "outliers = target[target == 1]\n",
        "print(\"outliers.shape\", outliers.shape)\n",
        "print(\"outlier fraction\", outliers.shape[0]/target.shape[0])\n",
        "# drop label columns from the dataframe. we're doing this so we can # do unsupervised training with unlabelled data. we've already \n",
        "# copied the label out into the target series so we can compare \n",
        "# against it later.\n",
        "data.drop([\"feature 0\"], axis=1, inplace=True)\n",
        "# check the shape for sanity checking.\n",
        "data.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Da9ecpR6dKjP",
        "outputId": "d7893bde-f65e-4276-b3b4-ecd60b4138eb"
      },
      "execution_count": 328,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "outliers.shape (15,)\n",
            "outlier fraction 0.3333333333333333\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(45, 18)"
            ]
          },
          "metadata": {},
          "execution_count": 328
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "train_svm, test_svm, train_target, test_target = train_test_split(data, target, train_size = 0.8)\n",
        "train_svm.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jFmGJwihiXT5",
        "outputId": "8a3cd342-7316-410b-9eb3-e6ecb40408e7"
      },
      "execution_count": 329,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(36, 18)"
            ]
          },
          "metadata": {},
          "execution_count": 329
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn import svm\n",
        "# set nu (which should be the proportion of outliers in our dataset) \n",
        "nu = outliers.shape[0] / target.shape[0]\n",
        "print(\"nu\", nu)\n",
        "model = svm.OneClassSVM(nu=nu, kernel='rbf', gamma=0.00005) \n",
        "model.fit(train_svm)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cFaOJFqEitWk",
        "outputId": "2d6457ea-4b56-4d94-c440-96db3d111b1a"
      },
      "execution_count": 330,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "nu 0.3333333333333333\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "OneClassSVM(gamma=5e-05, nu=0.3333333333333333)"
            ]
          },
          "metadata": {},
          "execution_count": 330
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn import metrics\n",
        "preds = model.predict(train_svm)\n",
        "targs = train_target \n",
        "print(\"accuracy: \", metrics.accuracy_score(targs, preds))\n",
        "print(\"precision: \", metrics.precision_score(targs, preds,average='micro'))                                         \n",
        "print(\"recall: \", metrics.recall_score(targs, preds,average='micro'))\n",
        "print(\"f1: \", metrics.f1_score(targs, preds, average='micro'))\n",
        "#print(\"area under curve (auc): \", metrics.roc_auc_score(targs, preds))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "e6hgKo0AjOhV",
        "outputId": "397ebe1c-ce92-450c-a689-d6c0bde1a73d"
      },
      "execution_count": 331,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "accuracy:  0.2222222222222222\n",
            "precision:  0.2222222222222222\n",
            "recall:  0.2222222222222222\n",
            "f1:  0.2222222222222222\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "preds = model.predict(test_svm)\n",
        "targs = test_target \n",
        "print(\"accuracy: \", metrics.accuracy_score(targs, preds))\n",
        "print(\"precision: \", metrics.precision_score(targs, preds,average='micro'))                                         \n",
        "print(\"recall: \", metrics.recall_score(targs, preds,average='micro'))\n",
        "print(\"f1: \", metrics.f1_score(targs, preds,average='micro'))\n",
        "#print(\"area under curve (auc): \", metrics.roc_auc_score(targs, preds))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xM_4hZ6qkb-7",
        "outputId": "75f9aacf-2cc5-4646-d69c-e30f9aa3458f"
      },
      "execution_count": 332,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "accuracy:  0.1111111111111111\n",
            "precision:  0.1111111111111111\n",
            "recall:  0.1111111111111111\n",
            "f1:  0.1111111111111111\n"
          ]
        }
      ]
    }
  ]
}